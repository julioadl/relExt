{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.6.11 (default, Jun 29 2020, 05:15:03) \n",
      "[GCC 5.4.0 20160609]\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "print(sys.version)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:516: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:517: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:518: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:519: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:520: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:525: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n",
      "/usr/local/lib/python3.6/dist-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n",
      "  from ._conv import register_converters as _register_converters\n",
      "/usr/local/lib/python3.6/dist-packages/tensorboard/compat/tensorflow_stub/dtypes.py:541: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "/usr/local/lib/python3.6/dist-packages/tensorboard/compat/tensorflow_stub/dtypes.py:542: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "/usr/local/lib/python3.6/dist-packages/tensorboard/compat/tensorflow_stub/dtypes.py:543: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "/usr/local/lib/python3.6/dist-packages/tensorboard/compat/tensorflow_stub/dtypes.py:544: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "/usr/local/lib/python3.6/dist-packages/tensorboard/compat/tensorflow_stub/dtypes.py:545: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "/usr/local/lib/python3.6/dist-packages/tensorboard/compat/tensorflow_stub/dtypes.py:550: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "import torch\n",
    "from transformers import *\n",
    "\n",
    "class relationEmbeddings:\n",
    "    def __init__(self):\n",
    "        self._tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
    "        self._bert_model = BertModel.from_pretrained('bert-base-uncased', output_hidden_states = True).cuda()\n",
    "        self._bert_model.eval()\n",
    "        \n",
    "    def tokenize(self, sentence):\n",
    "        marked_sentence = '[CLS] ' + sentence + ' [SEP]'\n",
    "        tokenized_text = self._tokenizer.tokenize(marked_sentence)\n",
    "        return tokenized_text\n",
    "    \n",
    "    def get_embeddings(self, sentence):\n",
    "        tokenized_text = self.tokenize(sentence)\n",
    "        indexed_tokens = self._tokenizer.convert_tokens_to_ids(tokenized_text)\n",
    "        segment_ids = [1]*len(tokenized_text)\n",
    "        \n",
    "        #Convert to tensor\n",
    "        tokens_tensor = torch.tensor([indexed_tokens]).cuda()\n",
    "        segment_tensors = torch.tensor([segment_ids]).cuda()\n",
    "        \n",
    "        with torch.no_grad():\n",
    "            encoded_layers = self._bert_model(tokens_tensor, segment_tensors)\n",
    "            \n",
    "        return encoded_layers[-1][0:12]\n",
    "    \n",
    "    def sentence2vec(self, sentence):\n",
    "        '''\n",
    "        Returns concatenated hidden dimensions\n",
    "        '''\n",
    "        encoded_layers = self.get_embeddings(sentence)\n",
    "        token_embeddings = []\n",
    "        tokenized_text = self.tokenize(sentence)\n",
    "        #What is is batch? The number of sentences passed\n",
    "        batch_i = 0\n",
    "        for token_i in range(len(tokenized_text)):\n",
    "            hidden_layers = []\n",
    "            for layer_i in range(len(encoded_layers)):\n",
    "                vec = encoded_layers[layer_i][batch_i][token_i]\n",
    "                hidden_layers.append(list(vec.cpu().detach().numpy()))\n",
    "                \n",
    "            token_embeddings.append(hidden_layers)\n",
    "            \n",
    "        #Concatenate embeddings\n",
    "        token_vecs_concat = []\n",
    "        for token in token_embeddings:\n",
    "            concat_embeddings = np.concatenate(token[-4:], axis=0)\n",
    "            token_vecs_concat.append(list(concat_embeddings))\n",
    "            return token_vecs_concat#.ravel().tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GeForce GTX 1080 Ti\n"
     ]
    }
   ],
   "source": [
    "re = relationEmbeddings()\n",
    "print(torch.cuda.get_device_name(0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import rel_ext\n",
    "import utils\n",
    "import os\n",
    "\n",
    "utils.fix_random_seeds()\n",
    "rel_ext_data_home = os.path.join('data', 'rel_ext_data')\n",
    "\n",
    "corpus = rel_ext.Corpus(os.path.join(rel_ext_data_home, 'corpus.tsv.gz'))\n",
    "kb = rel_ext.KB(os.path.join(rel_ext_data_home, 'kb.tsv.gz'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Corpus with 331,696 examples"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corpus"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "\n",
    "### Generate representation for adjoins\n",
    "\n",
    "def _get_tuples_for_relation(relation:str):\n",
    "    return list(map(lambda x:(x.sbj, x.obj), kb.get_triples_for_relation(relation)))\n",
    "\n",
    "def _get_text_for_examples(corpus_example):\n",
    "    return corpus_example.middle\n",
    "\n",
    "def _get_examples_for_relation(list_entities:list):\n",
    "    all_relations_examples = {}\n",
    "    for entities in list_entities:\n",
    "        examples = corpus.get_examples_for_entities(entities[0], entities[1])\n",
    "        if len(corpus.get_examples_for_entities(entities[0], entities[1])) > 0:\n",
    "            all_relations_examples[str(entities)] = list(map(lambda x:_get_text_for_examples(x), corpus.get_examples_for_entities(entities[0], entities[1])))\n",
    "        else:\n",
    "            continue         \n",
    "    return all_relations_examples\n",
    "\n",
    "#Uses np.mean just to keep dimensions\n",
    "def _get_bert_representations(dict_entities: dict, sentence2vecFn):\n",
    "    entities_representations = {}\n",
    "    for entities in dict_entities:\n",
    "        bert_representations = []\n",
    "        for example in dict_entities[entities]:\n",
    "            try:\n",
    "                rep = sentence2vecFn(example)\n",
    "            except:\n",
    "                continue\n",
    "            bert_representations.append(rep)\n",
    "        entities_representations[entities] = np.mean(bert_representations, axis=0)\n",
    "        \n",
    "    return entities_representations         \n",
    "\n",
    "#Wrapper for obtaining text for relations\n",
    "def get_text_for_relation(relation:str):\n",
    "    tuples_in_relation = _get_tuples_for_relation(relation)\n",
    "    return _get_examples_for_relation(tuples_in_relation)\n",
    "\n",
    "def get_dict_of_relations_bert_vecs(dict_relations_text:dict, sentence2vecFn):\n",
    "    return {entity: _get_bert_representations(dict_relations_text[entity], sentence2vecFn) for entity in dict_relations_text}\n",
    "\n",
    "def vectorize_logic(text: list, vocabulary:list):\n",
    "    vectorizer = CountVectorizer(vocabulary)\n",
    "    X = vectorizer.fit(text)\n",
    "    return X.to_array()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Get all relations\n",
    "\n",
    "all_relations = [i for i in kb.all_relations]\n",
    "\n",
    "#Obtain their text from examples:\n",
    "text = {relation: get_text_for_relation(relation) for relation in all_relations}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Relation: adjoins with number of examples 1414\n",
      "Relation: author with number of examples 1450\n",
      "Relation: capital with number of examples 298\n",
      "Relation: contains with number of examples 7123\n",
      "Relation: film_performance with number of examples 2074\n",
      "Relation: founders with number of examples 1023\n",
      "Relation: genre with number of examples 297\n",
      "Relation: has_sibling with number of examples 1653\n",
      "Relation: has_spouse with number of examples 1986\n",
      "Relation: is_a with number of examples 1243\n",
      "Relation: nationality with number of examples 940\n",
      "Relation: parents with number of examples 885\n",
      "Relation: place_of_birth with number of examples 692\n",
      "Relation: place_of_death with number of examples 514\n",
      "Relation: profession with number of examples 676\n",
      "Relation: worked_at with number of examples 829\n"
     ]
    }
   ],
   "source": [
    "for relation in all_relations:\n",
    "    print(f'Relation: {relation} with number of examples {len(text[relation])}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "243"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(text['adjoins'][\"('France', 'Spain')\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "relations_representations_middle = get_dict_of_relations_bert_vecs(text, re.sentence2vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3072"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(relations_representations_middle['adjoins'][\"('France', 'Spain')\"][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "relations_representations_str = {}\n",
    "for rel in relations_representations_middle:\n",
    "    relations_representations_str[rel] = {}\n",
    "    for ex in relations_representations_middle[rel]:\n",
    "        relations_representations_str[rel][str(ex)] = relations_representations_middle[rel][ex].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "relations_representations_middle['adjoins'][\"('France', 'Spain')\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys([\"('France', 'Spain')\", \"('Thailand', 'Laos')\", \"('Alberta', 'Northwest_Territories')\", \"('County_Kilkenny', 'County_Laois')\", \"('Tianjin', 'Hebei')\", \"('Bavaria', 'Thuringia')\", \"('Hispaniola', 'Cuba')\", \"('Libya', 'Egypt')\", \"('Jordan', 'Saudi_Arabia')\", \"('Montana', 'Alberta')\", \"('East_River', 'The_Bronx')\", \"('Honduras', 'Nicaragua')\", \"('Haryana', 'Rajasthan')\", \"('London_Borough_of_Lambeth', 'London_Borough_of_Southwark')\", \"('Canada', 'United_States_of_America')\", \"('Salta_Province', 'Jujuy_Province')\", \"('France', 'Belgium')\", \"('Afghanistan', 'Tajikistan')\", \"('North_Africa', 'Central_Africa')\", \"('Spain', 'Atlantic_Ocean')\", \"('Oklahoma', 'New_Mexico')\", \"('France', 'Germany')\", \"('Montenegro', 'Albania')\", \"('Northern_Territory', 'Western_Australia')\", \"('Golden_Gate_Bridge', 'Pacific_Ocean')\", \"('Sierra_Leone', 'Atlantic_Ocean')\", \"('Australia', 'Papua_New_Guinea')\", \"('Vermont', 'New_Hampshire')\", \"('Lake_Erie', 'Michigan')\", \"('Narayani_Zone', 'Bagmati_Zone')\", \"('Los_Angeles_County', 'San_Bernardino_County')\", \"('Iraq', 'Iran')\", \"('Uganda', 'Tanzania')\", \"('Punjab,_India', 'Rajasthan')\", \"('Moldova', 'Romania')\", \"('Djibouti', 'Eritrea')\", \"('Alabama', 'Georgia')\", \"('Lithuania', 'Poland')\", \"('Chennai', 'Kanchipuram')\", \"('Democratic_Republic_of_the_Congo', 'Central_African_Republic')\", \"('Tennessee', 'Missouri')\", \"('San_Francisco_Bay', 'Golden_Gate_Bridge')\", \"('United_States_Virgin_Islands', 'British_Virgin_Islands')\", \"('Pacific_Ocean', 'Baja_California_peninsula')\", \"('Alabama', 'Tennessee')\", \"('Gdynia', 'Sopot')\", \"('United_Arab_Emirates', 'Oman')\", \"('Spain', 'Portugal')\", \"('London_Borough_of_Islington', 'London_Borough_of_Hackney')\", \"('Democratic_Republic_of_the_Congo', 'Uganda')\", \"('Sonoma_County', 'Marin_County')\", \"('Albania', 'Republic_of_Macedonia')\", \"('Friar_Park', 'Henley-on-Thames')\", \"('Vanuatu', 'New_Caledonia')\", \"('Contiguous_United_States', 'Canada')\", \"('Overijssel', 'Flevoland')\", \"('County_Waterford', 'County_Wexford')\", \"('Arctic_Ocean', 'Atlantic_Ocean')\", \"('Prince_Edward_Island', 'New_Brunswick')\", \"('Oval_Office', 'Cabinet_Room')\", \"('Guyana', 'Suriname')\", \"('Clare_College,_Cambridge', 'Trinity_Hall,_Cambridge')\", \"('Coquitlam', 'Port_Coquitlam')\", \"('Prypiat', 'Chernobyl_Nuclear_Power_Plant')\", \"('Kentucky', 'West_Virginia')\", \"('Savannakhet_Province', 'Vietnam')\", \"('Saudi_Arabia', 'Oman')\", \"('Brazil', 'Paraguay')\", \"('New_Caledonia', 'Vanuatu')\", \"('Queensland', 'Northern_Territory')\", \"('Oklahoma', 'Colorado')\", \"('Pennine_Alps', 'Bernese_Alps')\", \"('Myanmar', 'China')\", \"('Benin', 'Niger')\", \"('Hesse', 'Bavaria')\", \"('London_Borough_of_Barnet', 'London_Borough_of_Haringey')\", \"('Coahuila', 'Texas')\", \"('NW_postcode_area', 'HA_postcode_area')\", \"('English_Bay', 'Burrard_Inlet')\", \"('United_Kingdom', 'Republic_of_Ireland')\", \"('San_Francisco', 'Marin_County')\", \"('Golden_Gate', 'San_Francisco_Bay')\", \"('Tiruvallur', 'Chennai')\", \"('County_Waterford', 'County_Tipperary')\", \"('Kuwait', 'Iraq')\", \"('Nova_Scotia', 'New_Brunswick')\", \"('New_Caledonia', 'Australia')\", \"('Punjab,_Pakistan', 'Sindh')\", \"('Lithuania', 'East_Prussia')\", \"('Russia', 'Poland')\", \"('Pacific_Northwest', 'Pacific_Ocean')\", \"('Chaco_Province', 'Corrientes_Province')\", \"('Guinea', 'Sierra_Leone')\", \"('Costa_Rica', 'Nicaragua')\", \"('Lower_Saxony', 'Hesse')\", \"('East_Africa', 'Southern_Africa')\", \"('Netherlands', 'North_Sea')\", \"('Tofino', 'Pacific_Rim_National_Park_Reserve')\", \"('Brooklyn', 'Staten_Island')\", \"('Sindh', 'India')\", \"('Tatarstan', 'Chuvashia')\", \"('Tennessee', 'Alabama')\", \"('Connecticut', 'Massachusetts')\", \"('Oregon', 'Washington')\", \"('Wisconsin', 'Michigan')\", \"('Abruzzo', 'Lazio')\", \"('Uganda', 'Democratic_Republic_of_the_Congo')\", \"('Serbia', 'Bosnia_and_Herzegovina')\", \"('Salta_Province', 'Santiago_del_Estero_Province')\", \"('Tiberias', 'Sea_of_Galilee')\", \"('Southern_Africa', 'Central_Africa')\", \"('Putney', 'River_Thames')\", \"('Montana', 'Wyoming')\", \"('Faridabad', 'Delhi')\", \"('New_Westminster', 'Burnaby')\", \"('San_Francisco_Bay', 'San_Francisco')\", \"('Poland', 'Czech_Republic')\", \"('Springfield', 'West_Springfield')\", \"('Ivory_Coast', 'Burkina_Faso')\", \"('Brandenburg', 'Saxony-Anhalt')\", \"('Australia', 'New_Zealand')\", \"('New_York', 'Massachusetts')\", \"('Brazil', 'Argentina')\", \"('Pennsylvania', 'Ontario')\", \"('Australian_Capital_Territory', 'New_South_Wales')\", \"('Connecticut', 'New_York')\", \"('Golden_Gate_Bridge', 'Marin_Headlands')\", \"('Croatia', 'Serbia')\", \"('London_Borough_of_Barnet', 'London_Borough_of_Brent')\", \"('Spain', 'France')\", \"('Pennsylvania', 'New_York')\", \"('Pacific_Ocean', 'Washington')\", \"('Croatia', 'Montenegro')\", \"('Minnesota', 'Manitoba')\", \"('Manyara_Region', 'Kilimanjaro_Region')\", \"('Jodhpur', 'Bikaner')\", \"('Ethiopia', 'Sudan')\", \"('British_Columbia', 'Northwest_Territories')\", \"('Northeastern_United_States', 'Canada')\", \"('Ontario', 'Winnipeg')\", \"('Niger', 'Algeria')\", \"('San_Francisco_Bay', 'Golden_Gate')\", \"('North_Lanarkshire', 'Glasgow')\", \"('Belarus', 'Ukraine')\", \"('Montenegro', 'Bosnia_and_Herzegovina')\", \"('Fiji', 'Vanuatu')\", \"('Togo', 'Benin')\", \"('Morocco', 'Western_Sahara')\", \"('Oklahoma', 'Kansas')\", \"('Albania', 'Greece')\", \"('Buenos_Aires_Province', 'Buenos_Aires')\", \"('Papua_New_Guinea', 'Australia')\", \"('Azerbaijan', 'Russia')\", \"('Nebraska', 'Iowa')\", \"('Skagerrak', 'Kattegat')\", \"('Africa', 'Arabian_Peninsula')\", \"('South_Sudan', 'Sudan')\", \"('Propylaea', 'Parthenon')\", \"('Chennai', 'Chengalpattu')\", \"('Wales', 'England')\", \"('Maine', 'Gulf_of_Maine')\", \"('Israel', 'Jordan')\", \"('Mecklenburg-Vorpommern', 'Brandenburg')\", \"('Kentucky', 'Illinois')\", \"('Serbia', 'Bulgaria')\", \"('Lithuania', 'Kaliningrad_Oblast')\", \"('Uganda', 'Sudan')\", \"('Portofino', 'Santa_Margherita_Ligure')\", \"('Enschede', 'Hengelo')\", \"('Port_of_Houston', 'Houston_Ship_Channel')\", \"('Lunda_Sul_Province', 'Lunda_Norte_Province')\", \"('Myanmar', 'Thailand')\", \"('Guatemala', 'Honduras')\", \"('Singapore', 'Johor_Bahru')\", \"('Abruzzo', 'Marche')\", \"('Potsdam', 'Berlin')\", \"('Kazakhstan', 'Uzbekistan')\", \"('Mali', 'Mauritania')\", \"('Liechtenstein', 'Austria')\", \"('Brandenburg', 'Saxony')\", \"('Mali', 'Niger')\", \"('Lazio', 'Abruzzo')\", \"('Queens', 'Brooklyn')\", \"('Oklahoma', 'Texas')\", \"('Republic_of_Macedonia', 'Albania')\", \"('Lake_Michigan', 'Wisconsin')\", \"('Canada', 'Atlantic_Ocean')\", \"('Saskatchewan', 'Winnipeg')\", \"('Iraq', 'Kuwait')\", \"('Poland', 'Ukraine')\", \"('Burrard_Inlet', 'Vancouver')\", \"('Mato_Grosso_do_Sul', 'Mato_Grosso')\", \"('Panama', 'Costa_Rica')\", \"('Mozambique', 'Malawi')\", \"('Burundi', 'Lake_Tanganyika')\", \"('Moxico_Province', 'Lunda_Sul_Province')\", \"('Jordan', 'Israel')\", \"('Brooklyn', 'Queens')\", \"('Rajasthan', 'Haryana')\", \"('Shoreditch', 'Hoxton')\", \"('Chuvashia', 'Tatarstan')\", \"('Vancouver', 'Fraser_River')\", \"('Lake_Victoria', 'Uganda')\", \"('Atlantic_Ocean', 'Caribbean_Sea')\", \"('University_of_California,_San_Diego', 'La_Jolla')\", \"('South_Asia', 'Southeast_Asia')\", \"('Stanislaus_County', 'Santa_Clara_County')\", \"('Minnesota', 'Iowa')\", \"('North_Africa', 'West_Africa')\", \"('Russia', 'Mongolia')\", \"('CNN_Center', 'Philips_Arena')\", \"('Renfrewshire', 'Glasgow')\", \"('Ukraine', 'Slovakia')\", \"('Lake_Tanganyika', 'Zambia')\", \"('Albania', 'Serbia')\", \"('Brazil', 'Guyana')\", \"('Albania', 'Montenegro')\", \"('Westchester_County', 'Rockland_County')\", \"('Pakistan', 'Gujarat')\", \"('Guyana', 'Venezuela')\", \"('County_Waterford', 'County_Cork')\", \"('Warrick_County', 'Vanderburgh_County')\", \"('San_Francisco', 'San_Francisco_Bay')\", \"('Abruzzo', 'Molise')\", \"('East_Africa', 'North_Africa')\", \"('East_Malaysia', 'Indonesia')\", \"('Georgia', 'South_Carolina')\", \"('London_Borough_of_Bexley', 'London_Borough_of_Bromley')\", \"('Northern_Territory', 'Queensland')\", \"('Irish_Sea', 'Ireland')\", \"('Belarus', 'Latvia')\", \"('Nevada', 'Arizona')\", \"('New_Mexico', 'Texas')\", \"('Wisconsin', 'Minnesota')\", \"('Lombardy', 'Piedmont')\", \"('Pakistan', 'Iran')\", \"('Hebei', 'Tianjin')\", \"('Dominican_Republic', 'Haiti')\", \"('Bolivia', 'Peru')\", \"('Mato_Grosso_do_Sul', 'Minas_Gerais')\", \"('Afghanistan', 'Iran')\", \"('Daly_City', 'South_San_Francisco')\", \"('Tasman_Sea', 'Pacific_Ocean')\", \"('Tanzania', 'Lake_Victoria')\", \"('Namibia', 'Angola')\", \"('North_Korea', 'China')\", \"('Belarus', 'Lithuania')\", \"('Lebanon', 'Syria')\", \"('Turkmenistan', 'Afghanistan')\", \"('Nigeria', 'Benin')\", \"('Hamburg', 'Schleswig-Holstein')\", \"('Liberia', 'Sierra_Leone')\", \"('Ireland', 'Irish_Sea')\", \"('Vermont', 'New_York')\", \"('Iowa', 'South_Dakota')\", \"('Western_United_States', 'Eastern_United_States')\", \"('Baja_California', 'California')\", \"('Apache_County', 'Navajo_County')\", \"('Loiret', 'Yonne')\", \"('Marin_County', 'San_Francisco_Bay')\", \"('Queensland', 'South_Australia')\", \"('Adriatic_Sea', 'Albania')\", \"('Carnegie_Mellon_University', 'University_of_Pittsburgh')\", '(\"Rub\\'_al_Khali\", \\'Liwa_Oasis\\')', \"('Gurgaon', 'Delhi')\", \"('Somalia', 'Ethiopia')\", \"('Azerbaijan', 'Armenia')\", \"('Maine', 'New_Brunswick')\", \"('Italy', 'Austria')\", \"('Tula_Oblast', 'Kaluga_Oblast')\", \"('Shanxi', 'Hebei')\", \"('Liberia', 'Guinea')\", \"('Haiti', 'Dominican_Republic')\", \"('Russia', 'Ukraine')\", \"('Glasgow', 'Dunbartonshire')\", \"('Jammu', 'Vaishno_Devi')\", \"('River_Thames', 'City_of_London')\", \"('Democratic_Republic_of_the_Congo', 'Lake_Kivu')\", \"('Belarus', 'Russia')\", \"('France', 'Andorra')\", \"('Iraq', 'Syria')\", \"('Rwanda', 'Uganda')\", \"('Slovakia', 'Austria')\", \"('Manitoba', 'Minnesota')\", \"('Sea_of_Azov', 'Black_Sea')\", \"('Montana', 'British_Columbia')\", \"('Atlantic_Ocean', 'France')\", \"('Switzerland', 'Austria')\", \"('East_Africa', 'Central_Africa')\", \"('Saudi_Arabia', 'Jordan')\", \"('River_Thames', 'Putney')\", \"('Massachusetts', 'New_York')\", \"('Poland', 'Russia')\", \"('Eritrea', 'Djibouti')\", \"('Mongolia', 'Russia')\", \"('Atlantic_Ocean', 'Arctic_Ocean')\", \"('River_Thames', 'City_of_Westminster')\", \"('Bab-el-Mandeb', 'Djibouti')\", \"('Uzbekistan', 'Kyrgyzstan')\", \"('Mongolia', 'China')\", \"('Arizona', 'Sonora')\", \"('Israel', 'Egypt')\", \"('Libya', 'Tunisia')\", \"('Texas', 'Coahuila')\", \"('Atlantic_Ocean', 'Gulf_of_Mexico')\", \"('Kazakhstan', 'China')\", \"('Uganda', 'Rwanda')\", \"('Shasta_County', 'Siskiyou_County')\", \"('City_of_Stonnington', 'City_of_Yarra')\", \"('Florida', 'Georgia')\", \"('Hebei', 'Shandong')\", \"('Vietnam', 'Laos')\", \"('Togo', 'Ghana')\", \"('Srikakulam', 'Vizianagaram')\", \"('City_of_London', 'River_Thames')\", \"('Mexico', 'Gulf_of_California')\", \"('Queanbeyan', 'Canberra')\", \"('Atlantic_Ocean', 'Ireland')\", \"('Somalia', 'Kenya')\", \"('Canada', 'Contiguous_United_States')\", \"('Massachusetts', 'Rhode_Island')\", \"('Cambodia', 'Thailand')\", \"('Cape_Town', 'Indian_Ocean')\", \"('South_Asia', 'Central_Asia')\", \"('Pampas', 'Patagonia')\", \"('Poland', 'Lithuania')\", \"('Honduras', 'El_Salvador')\", \"('California', 'Oregon')\", \"('Washington', 'British_Columbia')\", \"('Vizianagaram', 'Visakhapatnam')\", \"('India', 'China')\", \"('Chicago', 'Lake_Michigan')\", \"('Liechtenstein', 'Switzerland')\", \"('Colombia', 'Peru')\", \"('Drenthe', 'Overijssel')\", \"('London_Borough_of_Tower_Hamlets', 'London_Borough_of_Hackney')\", \"('Nigeria', 'Cameroon')\", \"('Oaxaca', 'Guerrero')\", \"('Tanzania', 'Democratic_Republic_of_the_Congo')\", \"('France', 'Flanders')\", \"('Emilia-Romagna', 'Tuscany')\", \"('Uzbekistan', 'Afghanistan')\", \"('Ontario', 'New_York')\", \"('Canada', 'Michigan')\", \"('Erlangen', 'Nuremberg')\", \"('Brazil', 'Bolivia')\", \"('Kenya', 'Sudan')\", \"('Sierra_Leone', 'Liberia')\", \"('Atlantic_Ocean', 'Baltic_Sea')\", \"('County_Kilkenny', 'County_Tipperary')\", \"('Victoria_(Australia)', 'South_Australia')\", \"('Suriname', 'Guyana')\", \"('Ohio', 'Kentucky')\", \"('Feucht', 'Nuremberg')\", \"('Botswana', 'South_Africa')\", \"('East_River', 'Manhattan')\", \"('Saudi_Arabia', 'Yemen')\", \"('Zimbabwe', 'Mozambique')\", \"('Elbe', 'Dresden')\", \"('Zimbabwe', 'Botswana')\", \"('Nevada', 'Oregon')\", \"('Nebraska', 'Kansas')\", \"('Botswana', 'Zambia')\", \"('Ontario', 'Detroit')\", \"('Wyoming', 'Utah')\", \"('India', 'Sindh')\", \"('New_York', 'Vermont')\", \"('CH_postcode_area', 'L_postcode_area')\", \"('Gulf_of_California', 'Pacific_Ocean')\", \"('Slovakia', 'Czech_Republic')\", \"('Carmel-by-the-Sea', 'Big_Sur')\", \"('South_Dakota', 'Wyoming')\", \"('South_Asia', 'Western_Asia')\", \"('Democratic_Republic_of_the_Congo', 'Burundi')\", \"('Western_Cape', 'Northern_Cape')\", \"('New_Hampshire', 'Vermont')\", \"('Pennsylvania', 'Delaware')\", \"('Kentucky', 'Ohio')\", \"('Brandenburg', 'Lower_Saxony')\", \"('Brazil', 'Colombia')\", \"('Liberia', 'Ivory_Coast')\", \"('Hebei', 'Inner_Mongolia')\", \"('Niger', 'Nigeria')\", \"('Guinea', 'Guinea-Bissau')\", \"('Lake_Geneva', 'Geneva')\", \"('Mexico', 'United_States_of_America')\", \"('South_Dakota', 'Montana')\", \"('British_Columbia', 'Montana')\", \"('Ontario', 'Pennsylvania')\", \"('Montana', 'Saskatchewan')\", \"('El_Salvador', 'Guatemala')\", \"('New_Hampshire', 'Massachusetts')\", \"('Santa_Fe_County', 'Sandoval_County')\", \"('Egypt', 'Israel')\", \"('Ancaster,_Ontario', 'Dundas,_Ontario')\", \"('Lesotho', 'South_Africa')\", \"('Idaho', 'Nevada')\", \"('Pacific_Ocean', 'California')\", \"('Croatia', 'Slovenia')\", \"('Sandoval_County', 'Bernalillo_County')\", \"('Poland', 'Slovakia')\", \"('Democratic_Republic_of_the_Congo', 'Angola')\", \"('Winchester', 'Southampton')\", \"('Bonner_County', 'Kootenai_County')\", \"('Oregon', 'Nevada')\", \"('Vermont', 'Massachusetts')\", \"('Siskiyou_County', 'Modoc_County')\", \"('Mediterranean_Sea', 'France')\", \"('Djibouti', 'Ethiopia')\", \"('Australia', 'New_Caledonia')\", \"('Boalsburg', 'State_College')\", \"('Oakland', 'San_Francisco')\", \"('Staten_Island', 'Brooklyn')\", \"('Monmouth_County', 'Ocean_County')\", \"('Atlantic_Ocean', 'Angola')\", \"('Nigeria', 'Niger')\", \"('Pacific_Ocean', 'Mexico')\", \"('Slovenia', 'Hungary')\", \"('Congo', 'Angola')\", \"('Ghana', 'Togo')\", \"('Atlantic_Ocean', 'Maine')\", \"('Scania', 'Blekinge')\", \"('Hebei', 'Jiangsu')\", \"('Aosta_Valley', 'Piedmont')\", \"('London_Borough_of_Southwark', 'London_Borough_of_Lewisham')\", \"('Beqaa_Governorate', 'Mount_Lebanon_Governorate')\", \"('Ivory_Coast', 'Liberia')\", \"('Atlantic_Ocean', 'North_Sea')\", \"('North_Carolina', 'Tennessee')\", \"('Nebraska', 'South_Dakota')\", \"('Netherlands', 'Belgium')\", \"('Gabon', 'Equatorial_Guinea')\", \"('United_States_of_America', 'Canada')\", \"('Dubai_Marina', 'Jebel_Ali')\", \"('Senegal', 'Guinea-Bissau')\", \"('E_postcode_area', 'IG_postcode_area')\", \"('Atlantic_Ocean', 'Buenos_Aires_Province')\", \"('Rwanda', 'Tanzania')\", \"('Nesher', 'Haifa')\", \"('Solana_Beach', 'Pacific_Ocean')\", \"('Kenya', 'Tanzania')\", \"('Alderley_Edge', 'Wilmslow')\", \"('Guinea', 'Senegal')\", \"('Molise', 'Abruzzo')\", \"('Rajasthan', 'Pakistan')\", \"('Indiana', 'Kentucky')\", \"('Afghanistan', 'Uzbekistan')\", \"('South_Sudan', 'Democratic_Republic_of_the_Congo')\", \"('Contiguous_United_States', 'Mexico')\", \"('Shasta_County', 'Tehama_County')\", \"('Tennessee', 'Georgia')\", \"('Nunavut', 'Northwest_Territories')\", \"('Nevada', 'California')\", \"('Golden_Gate_Bridge', 'San_Francisco')\", \"('Arctic_Circle', 'Arctic')\", \"('Formosa_Province', 'Salta_Province')\", \"('Vukovar', 'Osijek')\", \"('Kansas', 'Nebraska')\", \"('Iowa', 'Nebraska')\", \"('Gulf_of_Mexico', 'Texas')\", \"('Beqaa_Governorate', 'North_Governorate')\", '(\"Hadrian\\'s_Villa\", \"Villa_d\\'Este\")', \"('Botswana', 'Zimbabwe')\", \"('Propylaea', 'Erechtheion')\", \"('County_Tipperary', 'County_Kilkenny')\", \"('United_States_of_America', 'Gulf_of_Mexico')\", \"('Bikaner', 'Jodhpur')\", \"('Mauritania', 'Senegal')\", \"('Redland,_Bristol', 'Cotham,_Bristol')\", \"('New_York', 'Ontario')\", \"('Gaza_Strip', 'Israel')\", \"('Bab-el-Mandeb', 'Yemen')\", \"('Park_Slope', 'Windsor_Terrace')\", '(\"St_Michael\\'s_Mount\", \\'Marazion\\')', \"('Romania', 'Serbia')\", \"('Emilia-Romagna', 'Friuli-Venezia_Giulia')\", \"('University_of_Alabama_at_Birmingham', 'UAB_Hospital')\", \"('Bhubaneswar', 'Puri')\", \"('Misiones_Province', 'Corrientes_Province')\", \"('Porto', 'Vila_Nova_de_Gaia')\", \"('Pakistan', 'India')\", \"('London_Borough_of_Enfield', 'London_Borough_of_Haringey')\", \"('Ukraine', 'Hungary')\", \"('Regional_Municipality_of_Peel', 'Regional_Municipality_of_York')\", \"('West_Bridgford', 'Nottingham')\", \"('English_Channel', 'North_Sea')\", \"('Indiana', 'Michigan')\", \"('Oregon', 'Idaho')\", \"('Guinea', 'Mali')\", \"('Atlantic_Ocean', 'English_Channel')\", \"('Croatia', 'Bosnia_and_Herzegovina')\", \"('Ethiopia', 'Somalia')\", \"('Texas', 'New_Mexico')\", \"('Tennessee', 'Kentucky')\", \"('Lower_Saxony', 'Hamburg')\", \"('Kenya', 'Uganda')\", \"('Namibia', 'Botswana')\", \"('British_Isles', 'North_Sea')\", \"('Anne_Arundel_County', 'Baltimore_County')\", \"('North_America', 'South_America')\", \"('Black_Sea', 'Bulgaria')\", \"('Puntland', 'Somaliland')\", \"('Israel', 'Gaza_Strip')\", \"('Mexico_City', 'Puebla')\", \"('Philips_Arena', 'Georgia_World_Congress_Center')\", \"('Tajikistan', 'China')\", \"('France', 'Atlantic_Ocean')\", \"('Sweden', 'Baltic_Sea')\", \"('Marshall_Space_Flight_Center', 'Huntsville')\", \"('Atlantic_Ocean', 'Spain')\", \"('California', 'Mexico')\", \"('Sahel', 'Sahara')\", \"('South_Australia', 'New_South_Wales')\", \"('Kaliningrad_Oblast', 'Lithuania')\", \"('Tajikistan', 'Uzbekistan')\", \"('Katra,_Jammu_and_Kashmir', 'Vaishno_Devi')\", \"('Mozambique', 'South_Africa')\", \"('Barents_Sea', 'Norway')\", \"('Atlantic_Ocean', 'Celtic_Sea')\", \"('Solomon_Islands', 'Papua_New_Guinea')\", \"('Zimbabwe', 'Zambia')\", \"('Pwani_Region', 'Lindi_Region')\", \"('Germany', 'North_Sea')\", \"('New_Mexico', 'Colorado')\", \"('Mexico_State', 'Mexico_City')\", \"('Sindh', 'Balochistan,_Pakistan')\", \"('Niger', 'Mali')\", \"('Pacific_Ocean', 'Canada')\", \"('Washington', 'Oregon')\", \"('Lake_of_the_Woods_County', 'Beltrami_County')\", \"('Sequoia_National_Park', 'Kings_Canyon_National_Park')\", \"('Saxony', 'Brandenburg')\", \"('Uzbekistan', 'Kazakhstan')\", \"('California', 'Pacific_Ocean')\", \"('Lake_Kivu', 'Rwanda')\", \"('Tulare_County', 'Inyo_County')\", \"('County_Waterford', 'County_Kilkenny')\", \"('Ghana', 'Ivory_Coast')\", \"('Pacific_Ocean', 'Nicaragua')\", \"('Kentucky', 'Missouri')\", \"('Idaho', 'Wyoming')\", \"('Portugal', 'Atlantic_Ocean')\", \"('Montana', 'South_Dakota')\", \"('Zimbabwe', 'South_Africa')\", \"('Thuringia', 'Bavaria')\", \"('Elbe', 'Hamburg')\", \"('Bikaner', 'Jaisalmer')\", \"('Sindh', 'Arabian_Sea')\", \"('Rajasthan', 'Punjab,_India')\", \"('Poland', 'Germany')\", \"('Loiret', 'Eure-et-Loir')\", \"('Cleethorpes', 'Grimsby')\", \"('Georgia', 'North_Carolina')\", \"('Malawi', 'Tanzania')\", \"('Roseau_County', 'Kittson_County')\", \"('Texas', 'Tamaulipas')\", \"('Canada', 'Continental_United_States')\", \"('South_Asia', 'East_Asia')\", \"('Eritrea', 'Ethiopia')\", \"('Chandigarh', 'Panchkula')\", \"('Southeast_Asia', 'South_Asia')\", \"('Wisconsin', 'Illinois')\", \"('Atlantic_Canada', 'New_England')\", \"('Romania', 'Moldova')\", \"('Denmark', 'North_Sea')\", \"('Somalia', 'Djibouti')\", \"('Ethiopia', 'Eritrea')\", \"('Maine', 'Atlantic_Ocean')\", \"('Red_Sea', 'Egypt')\", \"('Poland', 'Belarus')\", \"('Atlantic_Ocean', 'New_Hampshire')\", \"('North_Africa', 'East_Africa')\", \"('Lake_Tanganyika', 'Burundi')\", \"('Armenia', 'Azerbaijan')\", \"('Saudi_Arabia', 'Kuwait')\", \"('Wyoming', 'Idaho')\", \"('Kenya', 'Somalia')\", \"('Guinea-Bissau', 'Guinea')\", \"('Germany', 'France')\", \"('Hispaniola', 'Puerto_Rico')\", \"('East_Asia', 'South_Asia')\", \"('San_Diego_County', 'Imperial_County')\", \"('Saxony', 'Bavaria')\", '(\\'Magic_Kingdom\\', \"Disney\\'s_Contemporary_Resort\")', \"('New_Westminster', 'Coquitlam')\", \"('Nepal', 'China')\", \"('Lower_Saxony', 'Schleswig-Holstein')\", \"('Hesse', 'Thuringia')\", \"('Oman', 'Saudi_Arabia')\", \"('Ontario', 'Michigan')\", \"('Swaziland', 'Mozambique')\", \"('Lake_Ohrid', 'Republic_of_Macedonia')\", \"('Pankow', 'Mitte')\", \"('South_Asia', 'Indian_Ocean')\", \"('Monterey_County', 'San_Benito_County')\", \"('Uzbekistan', 'Tajikistan')\", \"('Serbia', 'Montenegro')\", \"('Brazil', 'Suriname')\", \"('Gujarat', 'Rajasthan')\", \"('Vancouver', 'False_Creek')\", \"('Monterey_County', 'San_Luis_Obispo_County')\", \"('Washington_Territory', 'Oregon_Territory')\", \"('Western_Australia', 'Northern_Territory')\", \"('British_Columbia', 'Yukon')\", \"('Arizona', 'New_Mexico')\", \"('New_York_City', 'New_Jersey')\", \"('Pennsylvania', 'New_Jersey')\", \"('Brazil', 'Uruguay')\", \"('Toronto', 'Lake_Ontario')\", \"('Ukraine', 'Russia')\", \"('Oklahoma', 'Missouri')\", \"('Mexico', 'Guatemala')\", \"('Serbia', 'Albania')\", \"('Arizona', 'California')\", \"('Australia', 'Vanuatu')\", \"('Japan', 'China')\", \"('Thailand', 'Peninsular_Malaysia')\", \"('Helsinki', 'Vantaa')\", \"('Maharashtra', 'Gujarat')\", \"('Democratic_Republic_of_the_Congo', 'Sudan')\", \"('North_Uist', 'Benbecula')\", \"('Texas', 'Arkansas')\", \"('Oakland_County', 'Macomb_County')\", \"('Rhineland-Palatinate', 'Hesse')\", \"('Espoo', 'Helsinki')\", \"('Bahrain', 'Saudi_Arabia')\", \"('Alberta', 'British_Columbia')\", \"('Blanco_County', 'Gillespie_County')\", \"('Yelagiri', 'Jolarpet')\", \"('Southern_Africa', 'East_Africa')\", \"('Arlington_County', 'Fairfax_County,_Virginia')\", \"('Brazil', 'Venezuela')\", \"('Rwanda', 'Democratic_Republic_of_the_Congo')\", \"('Washington', 'Pacific_Ocean')\", \"('Equatorial_Guinea', 'Cameroon')\", \"('Baltic_Sea', 'Sweden')\", \"('Victoria_(Australia)', 'New_South_Wales')\", \"('Slovenia', 'Croatia')\", \"('Afghanistan', 'Turkmenistan')\", \"('New_Jersey', 'New_York_City')\", \"('Switzerland', 'Italy')\", \"('North_Finchley', 'East_Finchley')\", \"('Ocean_County', 'Burlington_County')\", \"('Benin', 'Burkina_Faso')\", \"('Kuwait', 'Saudi_Arabia')\", \"('Bridge_of_Allan', 'Dunblane')\", \"('Serbia', 'Hungary')\", \"('Italy', 'Switzerland')\", \"('Baltic_Sea', 'Atlantic_Ocean')\", \"('Gulf_of_Oman', 'Strait_of_Hormuz')\", \"('Niger', 'Chad')\", \"('South_Dakota', 'Nebraska')\", \"('Ontario', 'Ohio')\", \"('Oregon', 'Pacific_Ocean')\", \"('Thuringia', 'Hesse')\", \"('Republic_of_Ireland', 'United_Kingdom')\", \"('Atlantic_Ocean', 'Europe')\", \"('Gulf_of_California', 'Baja_California_peninsula')\", \"('Germany', 'Luxembourg')\", \"('New_Hampshire', 'Atlantic_Ocean')\", \"('Ivory_Coast', 'Guinea')\", \"('Spain', 'Morocco')\", \"('Colombia', 'Venezuela')\", \"('Montana', 'North_Dakota')\", \"('Lake_Erie', 'Ohio')\", \"('New_South_Wales', 'Victoria_(Australia)')\", \"('London_Borough_of_Haringey', 'London_Borough_of_Waltham_Forest')\", \"('Solomon_Islands', 'Australia')\", \"('Thailand', 'Cambodia')\", \"('Eritrea', 'Sudan')\", \"('Rwanda', 'Burundi')\", \"('Hudson_Bay', 'Atlantic_Ocean')\", \"('Chaco_Province', 'Formosa_Province')\", \"('Gulf_of_California', 'Mexico')\", \"('Nebraska', 'Colorado')\", \"('Champaign', 'Urbana')\", \"('Mali', 'Burkina_Faso')\", \"('Wyoming', 'Nebraska')\", \"('Arizona', 'Utah')\", \"('Serbia', 'Republic_of_Kosovo')\", \"('Gulf_of_Bothnia', 'Sweden')\", \"('East_Malaysia', 'Kalimantan')\", \"('India', 'Pakistan')\", \"('Spain', 'Andorra')\", \"('Mozambique', 'Tanzania')\", \"('Vietnam', 'Cambodia')\", \"('Delaware', 'Maryland')\", \"('Bavaria', 'Hesse')\", \"('Dubai_Internet_City', 'Dubai_Media_City')\", \"('Spain', 'Gibraltar')\", \"('San_Francisco', 'Silicon_Valley')\", \"('California', 'Arizona')\", \"('Indian_River_County', 'Brevard_County')\", \"('San_Luis_Obispo_County', 'Monterey_County')\", \"('East_Prussia', 'Lithuania')\", \"('Scania', 'Halland')\", \"('Palo_Alto', 'Mountain_View')\", \"('Indiana', 'Chicago')\", \"('Cambodia', 'Laos')\", \"('Marin_County', 'San_Francisco')\", \"('Atlantic_Ocean', 'Portugal')\", \"('Ireland', 'Atlantic_Ocean')\", \"('Marche', 'Abruzzo')\", \"('Wyoming', 'Colorado')\", \"('Luxembourg', 'France')\", \"('Massachusetts', 'New_Hampshire')\", \"('Nebraska', 'Wyoming')\", \"('Idaho', 'Oregon')\", \"('Sonoma_County', 'Mendocino_County')\", \"('Vietnam', 'China')\", \"('Detroit', 'Southfield')\", \"('Togo', 'Burkina_Faso')\", \"('Golden_Gate_Bridge', 'San_Francisco_Bay')\", \"('Lake_Champlain', 'Vermont')\", \"('Mediterranean_Sea', 'Europe')\", \"('Tajikistan', 'Kyrgyzstan')\", \"('Idaho', 'Washington')\", \"('France', 'United_Kingdom')\", \"('Maricopa_County', 'Pima_County')\", \"('Savannakhet_Province', 'Thailand')\", \"('Mozambique', 'Swaziland')\", \"('Guatemala', 'Mexico')\", \"('Ukraine', 'Belarus')\", \"('Kansas', 'Missouri')\", \"('Libya', 'Sudan')\", \"('Tanzania', 'Malawi')\", \"('New_Galloway', 'Loch_Ken')\", \"('Western_Sahara', 'Morocco')\", \"('Norway', 'North_Sea')\", \"('Lake_Victoria', 'Kenya')\", \"('Italian_Peninsula', 'Sicily')\", \"('Persian_Gulf', 'Arabian_Peninsula')\", \"('Black_Sea', 'Dobruja')\", \"('Tanzania', 'Kenya')\", \"('Italy', 'France')\", \"('Niger', 'Benin')\", \"('India', 'Bangladesh')\", \"('Nevada', 'Idaho')\", \"('Syria', 'Lebanon')\", \"('Emilia-Romagna', 'Liguria')\", \"('Saudi_Arabia', 'Bahrain')\", \"('Montenegro', 'Croatia')\", \"('San_Luis_Obispo_County', 'Santa_Barbara_County')\", \"('Delhi', 'Noida')\", \"('Tanzania', 'Burundi')\", \"('London_Borough_of_Ealing', 'London_Borough_of_Harrow')\", \"('India', 'Afghanistan')\", \"('Port_Moody', 'Coquitlam')\", \"('Detroit', 'Canada')\", \"('Colony_of_Vancouver_Island', 'Colony_of_British_Columbia')\", \"('Mexico', 'California')\", \"('Florida', 'Alabama')\", \"('Mali', 'Senegal')\", \"('South_Sudan', 'Kenya')\", \"('Colombia', 'Panama')\", \"('Rockland_County', 'Westchester_County')\", \"('Dublin', 'Wicklow')\", \"('United_Arab_Emirates', 'Saudi_Arabia')\", \"('Canada', 'Pacific_Ocean')\", \"('Russia', 'Norway')\", \"('British_Columbia', 'Idaho')\", \"('Senegal', 'Guinea')\", \"('Asia', 'Europe')\", \"('New_Mexico', 'Arizona')\", \"('South_Dakota', 'Minnesota')\", \"('Russia', 'Kazakhstan')\", \"('Italian_Peninsula', 'Sardinia')\", \"('Vanuatu', 'New_Zealand')\", \"('Barbican_Estate', 'Golden_Lane_Estate')\", \"('Massachusetts', 'Connecticut')\", \"('Russia', 'Belarus')\", \"('Solingen', 'Wuppertal')\", \"('Collin_County', 'Denton_County')\", \"('Jordan', 'West_Bank')\", \"('Noida', 'Delhi')\", \"('Netherlands', 'Germany')\", \"('County_Kerry', 'County_Cork')\", \"('Gelderland', 'Overijssel')\", \"('Washington', 'Idaho')\", \"('Republic_of_Ireland', 'Northern_Ireland')\", \"('County_Kilkenny', 'County_Wexford')\", \"('Paarl', 'Franschhoek')\", \"('Mediterranean_Sea', 'Spain')\", \"('Republic_of_Macedonia', 'Bulgaria')\", \"('Afghanistan', 'China')\", \"('Minnesota', 'Winnipeg')\", \"('Broward_County', 'Palm_Beach_County')\", \"('Burundi', 'Tanzania')\", \"('Western_Asia', 'South_Asia')\", \"('London_Borough_of_Southwark', 'London_Borough_of_Lambeth')\", \"('Spain', 'Mediterranean_Sea')\", \"('Kansas', 'Oklahoma')\", \"('Mauritania', 'Mali')\", \"('Vancouver', 'West_Vancouver')\", \"('New_Jersey', 'Pennsylvania')\", \"('France', 'Italy')\", \"('Maastricht', 'Aachen')\", \"('Atlantic_Ocean', 'Canada')\", \"('Pinellas_County', 'Pasco_County')\", \"('Rhode_Island', 'Massachusetts')\", \"('Petronas_Towers', 'KLCC_Park')\", \"('Guinea-Bissau', 'Senegal')\", \"('Vanderburgh_County', 'Warrick_County')\", \"('South_Australia', 'Northern_Territory')\", \"('Djibouti', 'Somaliland')\", \"('Delhi', 'Faridabad')\", \"('Porto', 'Douro')\", \"('Gujarat', 'Pakistan')\", \"('Indonesia', 'Australia')\", \"('California', 'Baja_California')\", \"('Monaco', 'France')\", \"('Panchkula', 'Chandigarh')\", \"('Russia', 'China')\", \"('France', 'Switzerland')\", \"('India', 'Bhutan')\", \"('Israel', 'Lebanon')\", \"('Oaxaca', 'Puebla')\", \"('Mannheim', 'Heidelberg')\", \"('Lake_Michigan', 'Michigan')\", \"('Jordan', 'Syria')\", \"('East_River', 'Brooklyn')\", \"('Heidelberg', 'Mannheim')\", \"('Czech_Republic', 'Slovakia')\", \"('Bangladesh', 'India')\", \"('Pacific_Ocean', 'Gulf_of_California')\", \"('Ramat_HaSharon', 'Herzliya')\", \"('Thailand', 'Malaysia')\", \"('Somaliland', 'Puntland')\", \"('Guatemala', 'El_Salvador')\", \"('Slovakia', 'Poland')\", \"('Nevada', 'Utah')\", \"('Switzerland', 'France')\", \"('Ontario', 'Manitoba')\", \"('Corsica', 'Sardinia')\", \"('Honduras', 'Guatemala')\", \"('Tivoli', 'Rome')\", \"('France', 'North_Sea')\", \"('Hebei', 'Beijing')\", \"('Haggerston', 'Hoxton')\", \"('Switzerland', 'Germany')\", \"('Taiwan', 'China')\", \"('Russia', 'Lithuania')\", \"('Uganda', 'Lake_Victoria')\", \"('Australia', 'Indonesia')\", \"('Israel', 'Syria')\", \"('West_Virginia', 'Pennsylvania')\", \"('London_Borough_of_Lewisham', 'London_Borough_of_Southwark')\", \"('Egypt', 'Red_Sea')\", \"('Slovakia', 'Ukraine')\", \"('Central_Asia', 'South_Asia')\", \"('Northern_Virginia', 'Maryland')\", \"('Saskatchewan', 'Manitoba')\", \"('Irish_Sea', 'Celtic_Sea')\", \"('Pennsylvania', 'West_Virginia')\", \"('Staten_Island', 'Perth_Amboy')\", \"('East_River', 'United_Nations_Headquarters')\", \"('English_Channel', 'Celtic_Sea')\", \"('Wyoming', 'Montana')\", \"('Northeastern_United_States', 'Southern_United_States')\", \"('Catamarca_Province', 'Salta_Province')\", \"('University_of_Pittsburgh', 'Carnegie_Mellon_University')\", \"('Libya', 'Algeria')\", \"('Pennsylvania', 'Ohio')\", \"('Canada', 'Northeastern_United_States')\", \"('Pennsylvania', 'Maryland')\", \"('East_River', 'Brooklyn_Navy_Yard')\", \"('Ethiopia', 'Djibouti')\", \"('Madhya_Pradesh', 'Rajasthan')\", \"('Northeastern_United_States', 'Midwestern_United_States')\", \"('Morocco', 'Algeria')\", \"('Gujarat', 'Madhya_Pradesh')\", \"('Beijing', 'Hebei')\", \"('Lake_Superior', 'Michigan')\", \"('River_Thames', 'London_Borough_of_Tower_Hamlets')\", \"('Indiana', 'Illinois')\", \"('Czech_Republic', 'Austria')\", \"('Coquitlam', 'Burnaby')\", \"('Croatia', 'Hungary')\", \"('Democratic_Republic_of_the_Congo', 'Zambia')\", '(\"St_George\\'s_Channel\", \\'Celtic_Sea\\')', \"('Mali', 'Guinea')\", \"('Shiga_Prefecture', 'Gifu_Prefecture')\", \"('Lake_Huron', 'Upper_Peninsula_of_Michigan')\", \"('East_River', 'Queens')\", \"('Portugal', 'Spain')\", \"('England', 'Scotland')\", \"('Gulf_of_Finland', 'Estonia')\", \"('South_Australia', 'Queensland')\", \"('West_Bank', 'Israel')\", \"('New_York_City', 'Pennsylvania')\", \"('Puebla', 'Oaxaca')\", \"('New_Zealand', 'Vanuatu')\", \"('Sweden', 'Finland')\", \"('Gulf_of_Mexico', 'Mexico')\", \"('Tanzania', 'Uganda')\", \"('West_Virginia', 'Ohio')\", \"('Connecticut', 'Rhode_Island')\", \"('Kenedy_County', 'Willacy_County')\", \"('Chinatown,_London', 'Soho')\", \"('Puerto_Rico', 'Hispaniola')\", \"('Sierra_Leone', 'Guinea')\", \"('Beltrami_County', 'Roseau_County')\", \"('New_York_City', 'Long_Island')\", \"('San_Francisco', 'Oakland')\", \"('Oman', 'United_Arab_Emirates')\", \"('Republic_of_Macedonia', 'Serbia')\", \"('Zealand', 'Funen')\", \"('Albania', 'Adriatic_Sea')\", \"('Kansas', 'Colorado')\", \"('San_Joaquin_County', 'Stanislaus_County')\", \"('Chengalpattu', 'Chennai')\", \"('False_Creek', 'Vancouver')\", \"('Serbia', 'Romania')\", \"('Germany', 'Austria')\", \"('Ohio', 'Lake_Erie')\", \"('Civic_Square,_Wellington', 'Wellington_Town_Hall')\", \"('Morocco', 'Spain')\", \"('Republic_of_Macedonia', 'Greece')\", \"('Tanzania', 'Zambia')\", \"('Sahara', 'Sahel')\", \"('Uruguay', 'Argentina')\", \"('Ukraine', 'Poland')\", \"('Slovakia', 'Hungary')\", \"('Wilmslow', 'Alderley_Edge')\", \"('Cambridge', 'Boston')\", \"('Czechoslovakia', 'Second_Polish_Republic')\", \"('Saskatchewan', 'Northwest_Territories')\", \"('Riverside_County', 'San_Bernardino_County')\", \"('Lake_Champlain', 'New_York')\", \"('Burundi', 'Democratic_Republic_of_the_Congo')\", \"('Brazil', 'Corrientes_Province')\", \"('Sindh', 'Punjab,_Pakistan')\", \"('Mississauga', 'Toronto')\", \"('Gibraltar', 'Spain')\", \"('Syria', 'Iraq')\", \"('Liaoning', 'Hebei')\", \"('Senegal', 'Mauritania')\", \"('Uruguay', 'Brazil')\", \"('Germany', 'Czech_Republic')\", \"('Tanzania', 'Lake_Tanganyika')\", \"('Gurgaon', 'New_Delhi')\", \"('SE_postcode_area', 'CR_postcode_area')\", \"('Gujarat', 'Maharashtra')\", \"('Jujuy_Province', 'Salta_Province')\", \"('Faridabad', 'New_Delhi')\", \"('Pacific_Ocean', 'Oregon')\", \"('English_Channel', 'England')\", \"('Chaco_Province', 'Santa_Fe_Province')\", \"('Saudi_Arabia', 'Qatar')\", \"('Jiangsu', 'Shandong')\", \"('Visakhapatnam', 'Vizianagaram')\", \"('Lake_Tanganyika', 'Tanzania')\", \"('Vanuatu', 'Fiji')\", \"('West_Bank', 'Jordan')\", \"('Uganda', 'Kenya')\", \"('Western_Sahara', 'Algeria')\", \"('City_of_Westminster', 'River_Thames')\", \"('Bolivia', 'Argentina')\", \"('London_Borough_of_Newham', 'London_Borough_of_Waltham_Forest')\", \"('Bolivia', 'Brazil')\", \"('Rhode_Island', 'Connecticut')\", \"('Burundi', 'Rwanda')\", \"('Poland', 'Kaliningrad_Oblast')\", \"('Ivory_Coast', 'Mali')\", \"('Midwestern_United_States', 'Southern_United_States')\", \"('Oregon', 'California')\", \"('Brandenburg', 'Mecklenburg-Vorpommern')\", \"('Bolivia', 'Paraguay')\", \"('Iowa', 'Illinois')\", \"('New_England', 'Atlantic_Canada')\", \"('Minnesota', 'Ontario')\", '(\\'Northern_Virginia\\', \"Prince_George\\'s_County\")', \"('Hesse', 'Rhineland-Palatinate')\", \"('Afghanistan', 'India')\", \"('Estonia', 'Latvia')\", \"('Santa_Barbara_County', 'Ventura_County')\", \"('North_Vancouver', 'Vancouver')\", \"('Ohio', 'Indiana')\", \"('Malawi', 'Zambia')\", \"('Bonn', 'Siegburg')\", \"('Vientiane_Prefecture', 'Vientiane_Province')\", \"('Swaziland', 'South_Africa')\", \"('Norway', 'Sweden')\", \"('Sonora', 'Arizona')\", \"('Kiev_Oblast', 'Poltava_Oblast')\", \"('Venezuela', 'Brazil')\", \"('French_Guiana', 'Brazil')\", \"('New_Mexico', 'Utah')\", \"('Kenya', 'South_Sudan')\", \"('London_Borough_of_Hillingdon', 'London_Borough_of_Harrow')\", \"('Bhubaneswar', 'Cuttack')\", \"('Wisconsin', 'Upper_Peninsula_of_Michigan')\", \"('Illinois_Institute_of_Technology', 'Shimer_College')\", \"('Sherwood_Park', 'Edmonton')\", \"('Jerusalem', 'Ramallah')\", \"('Belize', 'Guatemala')\", \"('Casco_Bay', 'Gulf_of_Maine')\", \"('Orion_Arm', 'Perseus_Arm')\", \"('Tanga_Region', 'Pwani_Region')\", \"('Long_Island', 'New_York_City')\", \"('Canton_of_Bern', 'Canton_of_Lucerne')\", \"('Kingdom_of_England', 'Kingdom_of_Scotland')\", \"('Kyoto_Prefecture', 'Shiga_Prefecture')\", \"('Massachusetts', 'Vermont')\", \"('Democratic_Republic_of_the_Congo', 'South_Sudan')\", \"('Beaulieu-sur-Mer', 'Villefranche-sur-Mer')\", \"('London_Borough_of_Redbridge', 'London_Borough_of_Waltham_Forest')\", \"('Deptford', 'Rotherhithe')\", \"('Sweden', 'Norway')\", \"('South_Sudan', 'Central_African_Republic')\", \"('Manitoba', 'North_Dakota')\", \"('Australia', 'Solomon_Islands')\", \"('City_of_Stonnington', 'City_of_Port_Phillip')\", \"('Western_Sahara', 'Mauritania')\", \"('Saskatchewan', 'Montana')\", \"('El_Salvador', 'Honduras')\", \"('New_York', 'New_Jersey')\", \"('Bokeo_Province', 'Myanmar')\", \"('Benin', 'Nigeria')\", \"('Russia', 'Estonia')\", \"('Imperial_County', 'Riverside_County')\", \"('Red_Sea', 'Arabian_Peninsula')\", \"('Albania', 'Lake_Ohrid')\", \"('Tanzania', 'Mozambique')\", \"('Republic_of_Macedonia', 'Lake_Ohrid')\", \"('Rajasthan', 'Uttar_Pradesh')\", \"('Oman', 'Yemen')\", \"('India', 'Myanmar')\", \"('Progressive_Field', 'Quicken_Loans_Arena')\", \"('West_Virginia', 'Maryland')\", \"('Tennessee', 'North_Carolina')\", \"('Libya', 'Niger')\", \"('Ohio', 'Pennsylvania')\", \"('New_York', 'Connecticut')\", \"('Kanchipuram', 'Chennai')\", \"('Fauquier_County', 'Loudoun_County')\", \"('Ecuador', 'Peru')\", \"('Mexico', 'Belize')\", \"('Iraq', 'Jordan')\", \"('Nazi_Germany', 'Second_Polish_Republic')\", \"('Brazil', 'Peru')\", \"('Kings_Canyon_National_Park', 'Sequoia_National_Park')\", \"('Western_Australia', 'South_Australia')\", \"('Guerrero', 'Oaxaca')\", \"('New_South_Wales', 'Australian_Capital_Territory')\", \"('India', 'Sri_Lanka')\", \"('Mali', 'Algeria')\", \"('Luxembourg', 'Germany')\", \"('Ramallah', 'Jerusalem')\", \"('Myanmar', 'India')\", \"('Konya', 'Ankara')\", \"('Atlantic_Ocean', 'British_Isles')\", \"('Hamburg', 'Lower_Saxony')\", \"('Corrientes_Province', 'Misiones_Province')\", \"('Anhui', 'Hangzhou')\", \"('Nebraska', 'Missouri')\", \"('Bochum', 'Dortmund')\", \"('Brandenburg', 'Berlin')\", \"('Aachen', 'Maastricht')\", \"('Texas', 'Gulf_of_Mexico')\", \"('Telemark', 'Rogaland')\", \"('Ohio', 'Michigan')\", \"('London_Borough_of_Haringey', 'London_Borough_of_Hackney')\", \"('Lithuania', 'Belarus')\", \"('Emilia-Romagna', 'Lombardy')\", \"('Nicaragua', 'Costa_Rica')\", \"('Tennessee', 'Arkansas')\", \"('CNN_Center', 'Georgia_World_Congress_Center')\", \"('United_States_of_America', 'Mexico')\", \"('Syria', 'Israel')\", \"('Mauritania', 'Algeria')\", \"('Alaska', 'British_Columbia')\", \"('Russia', 'North_Korea')\", \"('Corsica', 'Italian_Peninsula')\", \"('Kunming_Lake', 'Summer_Palace')\", \"('Norway', 'Russia')\", \"('County_Kilkenny', 'County_Waterford')\", \"('Nice', 'Cap_Ferrat')\", \"('Mauritania', 'Western_Sahara')\", \"('Norway', 'Finland')\", \"('Russia', 'Latvia')\", \"('Federated_States_of_Micronesia', 'Solomon_Islands')\", \"('Bhutan', 'India')\", \"('Burrard_Inlet', 'Indian_Arm')\", \"('Matn_District', 'Beirut')\", \"('Helsinki', 'Espoo')\", \"('County_Limerick', 'County_Cork')\", \"('Ocean_County', 'Monmouth_County')\", \"('Costa_Rica', 'Panama')\", \"('Alberta', 'Montana')\", \"('Storey_County', 'Lyon_County')\", \"('Thuringia', 'Saxony')\", \"('Venezuela', 'Guyana')\", \"('Cambodia', 'Vietnam')\", \"('New_England', 'Mid-Atlantic_states')\", \"('New_Jersey', 'New_York')\", \"('Northern_Territory', 'South_Australia')\", \"('Minas_Gerais', 'Mato_Grosso_do_Sul')\", \"('Gulf_of_Mexico', 'Atlantic_Ocean')\", \"('Estonia', 'Gulf_of_Finland')\", \"('Mechi_Zone', 'Kosi_Zone')\", \"('Arabian_Sea', 'Sindh')\", \"('Queens', 'East_River')\", \"('Contra_Costa_County', 'Solano_County')\", \"('Montana', 'Idaho')\", \"('Pakistan', 'Rajasthan')\", \"('Reinickendorf', 'Pankow')\", \"('Democratic_Republic_of_the_Congo', 'Tanzania')\", \"('Mercer_Island', 'Seattle')\", \"('Georgia', 'Florida')\", \"('Russia', 'Finland')\", \"('Idaho', 'British_Columbia')\", \"('Germany', 'Belgium')\", \"('Nicaragua', 'Pacific_Ocean')\", \"('Hebei', 'Shanxi')\", \"('Chiapas', 'Oaxaca')\", \"('Canino', 'Montalto_di_Castro')\", \"('Brazil', 'French_Guiana')\", \"('County_Clare', 'Galway')\", \"('Nicaragua', 'Atlantic_Ocean')\", \"('Iraq', 'Saudi_Arabia')\", \"('Fresno_County', 'Tulare_County')\", \"('Slovenia', 'Austria')\", \"('Delaware', 'New_Jersey')\", \"('London_Borough_of_Barnet', 'London_Borough_of_Camden')\", \"('Poland', 'Saxony')\", \"('Colony_of_British_Columbia', 'Colony_of_Vancouver_Island')\", \"('Lower_Saxony', 'Saxony-Anhalt')\", \"('Arizona', 'Nevada')\", \"('Puri', 'Bhubaneswar')\", \"('Suriname', 'Brazil')\", \"('East_River', 'Long_Island_City')\", \"('Tanzania', 'Rwanda')\", \"('South_America', 'North_America')\", \"('Vermont', 'Lake_Champlain')\", \"('London_Borough_of_Newham', 'London_Borough_of_Redbridge')\", \"('Saudi_Arabia', 'Iraq')\", '(\"Disney\\'s_Animal_Kingdom\", \"Disney\\'s_Animal_Kingdom_Lodge\")', \"('Niagara_County', 'Erie_County')\", \"('Rajasthan', 'Madhya_Pradesh')\", \"('Saxony', 'Poland')\", \"('Egypt', 'Sudan')\", \"('Hesse', 'North_Rhine-Westphalia')\", \"('Kenya', 'Lake_Victoria')\", \"('England', 'Wales')\", \"('Lithuania', 'Russia')\", \"('Norway', 'Barents_Sea')\", \"('El_Cajon', 'Santee')\", \"('Kenya', 'Ethiopia')\", \"('Maine', 'New_Hampshire')\", \"('Nepal', 'India')\", \"('Bhutan', 'China')\", \"('Tianjin', 'Beijing')\", \"('DH_postcode_area', 'NE_postcode_area')\", \"('Queensland', 'New_South_Wales')\", \"('Panama', 'Colombia')\", \"('New_York', 'Lake_Champlain')\", \"('Funen', 'Jutland')\", \"('Wisconsin', 'Lake_Superior')\", \"('Ivory_Coast', 'Ghana')\", \"('Saudi_Arabia', 'United_Arab_Emirates')\", \"('Lombardy', 'Emilia-Romagna')\", \"('Lake_Michigan', 'Upper_Peninsula_of_Michigan')\", \"('Slovenia', 'Italy')\", \"('Oaxaca', 'Veracruz')\", \"('Germany', 'Netherlands')\", \"('Libya', 'Chad')\", \"('Manitoba', 'Ontario')\", \"('Chennai', 'Tiruvallur')\", \"('New_Zealand', 'Australia')\", \"('Germany', 'Switzerland')\", \"('Azerbaijan', 'Iran')\", \"('Napa_County', 'Sonoma_County')\", \"('Indiana', 'Ohio')\", \"('Saxony', 'Czech_Republic')\", \"('Carnegie_Mellon_University', 'Schenley_Park')\", \"('Switzerland', 'Liechtenstein')\", \"('Romania', 'Bulgaria')\", \"('Serbia', 'Republic_of_Macedonia')\", \"('Iowa', 'Wisconsin')\", \"('British_Columbia', 'Alaska')\", \"('Mexico', 'Caribbean_Sea')\", \"('South_Australia', 'Western_Australia')\", \"('Oklahoma', 'Arkansas')\", \"('Greece', 'Albania')\", \"('Saskatchewan', 'North_Dakota')\", \"('Brooklyn', 'East_River')\", \"('Liguria', 'Emilia-Romagna')\", \"('Ohio', 'West_Virginia')\", \"('Wisconsin', 'Lake_Michigan')\", \"('New_Mexico', 'Oklahoma')\", \"('English_Channel', 'France')\", \"('Ecuador', 'Colombia')\", \"('Venezuela', 'Colombia')\", \"('Jaisalmer', 'Jodhpur')\", \"('Turkmenistan', 'Uzbekistan')\", \"('Somerset_West', 'Stellenbosch')\", \"('Dresden', 'Elbe')\", \"('Romania', 'Ukraine')\", \"('Africa', 'Europe')\", \"('Mediterranean_Sea', 'Monaco')\", \"('Wisconsin', 'Iowa')\", \"('Summer_Palace', 'Kunming_Lake')\", \"('Moldova', 'Ukraine')\", \"('County_Tipperary', 'County_Waterford')\", \"('Bernalillo_County', 'Valencia_County')\", \"('Thailand', 'Myanmar')\", \"('Guinea', 'Liberia')\", \"('Andorra', 'Spain')\", \"('Leslieville', 'Riverdale,_Toronto')\", \"('Misiones_Province', 'Paraguay')\", \"('Malaysia', 'Thailand')\", \"('North_Holland', 'South_Holland')\", \"('Pakistan', 'China')\", \"('Nigeria', 'Chad')\", \"('Lower_Saxony', 'North_Rhine-Westphalia')\", \"('New_South_Wales', 'South_Australia')\", \"('Tennessee', 'Mississippi')\", \"('Kentucky', 'Indiana')\", \"('Nicaragua', 'Honduras')\", \"('United_Kingdom', 'France')\", \"('Alberta', 'Saskatchewan')\", \"('Beijing', 'Tianjin')\", \"('BL_postcode_area', 'BB_postcode_area')\", \"('Jodhpur', 'Jaisalmer')\", \"('Yolo_County', 'Sacramento_County')\", \"('Uzbekistan', 'Turkmenistan')\", \"('Greece', 'Republic_of_Macedonia')\", \"('City_of_Melbourne', 'City_of_Yarra')\", \"('Namibia', 'South_Africa')\", \"('Guatemala', 'Belize')\", \"('Minnesota', 'Wisconsin')\", \"('Estonia', 'Russia')\", \"('Bavaria', 'Saxony')\", \"('Bolivia', 'Chile')\", \"('Lithuania', 'Latvia')\", \"('Manhattan', 'East_River')\", \"('Vancouver', 'North_Vancouver')\", \"('Eastern_Cape', 'Western_Cape')\", \"('Parthenon', 'Propylaea')\", \"('South_Dakota', 'Iowa')\", \"('Solomon_Islands', 'Vanuatu')\", \"('Pennsylvania', 'New_York_City')\", \"('Marin_County', 'Sonoma_County')\", \"('British_Columbia', 'Washington')\", \"('Germany', 'Denmark')\", \"('Niger', 'Libya')\", \"('Riverside_County', 'San_Diego_County')\", \"('Alabama', 'Florida')\", \"('South_Australia', 'Victoria_(Australia)')\", \"('New_York', 'Pennsylvania')\", \"('Shandong', 'Hebei')\", \"('Washington,_D.C.', 'Maryland')\", \"('Texas', 'Oklahoma')\", \"('Belize', 'Mexico')\", \"('Trinity_College,_Cambridge', 'Trinity_Hall,_Cambridge')\", \"('Cleveland', 'Shaker_Heights')\", \"('Senegal', 'Gambia')\", \"('Delaware', 'Pennsylvania')\", \"('Benin', 'Togo')\", \"('Benbecula', 'North_Uist')\", \"('Afghanistan', 'Pakistan')\", \"('San_Benito_County', 'Monterey_County')\", \"('Djibouti', 'Somalia')\", \"('Senegal', 'Mali')\", \"('Iowa', 'Minnesota')\", \"('Tajikistan', 'Afghanistan')\", \"('Madhya_Pradesh', 'Gujarat')\", \"('Andorra', 'France')\", \"('Italy', 'Slovenia')\", \"('Lake_Superior', 'Wisconsin')\", \"('Mexico', 'Gulf_of_Mexico')\", \"('Idaho', 'Utah')\", \"('Chicago', 'Indiana')\", \"('Vancouver', 'Burnaby')\", \"('Luanda_Province', 'Bengo_Province')\", \"('Peninsular_Malaysia', 'Thailand')\", \"('Sutton,_Dublin', 'Howth')\", \"('Albemarle_County', 'Fluvanna_County')\", \"('Montenegro', 'Serbia')\", \"('Vanuatu', 'Solomon_Islands')\", \"('Kazakhstan', 'Russia')\", \"('Audubon_Park,_New_Orleans', 'Audubon_Zoo')\", \"('Regional_Municipality_of_Halton', 'Regional_Municipality_of_Peel')\", \"('Egypt', 'Libya')\", \"('Jersey_City', 'Bayonne')\", \"('Charlottenburg-Wilmersdorf', 'Steglitz-Zehlendorf')\", \"('Malawi', 'Mozambique')\", \"('Minnesota', 'North_Dakota')\", \"('Silicon_Valley', 'San_Francisco')\", \"('Pacific_Ocean', 'Golden_Gate_Bridge')\", \"('California', 'Nevada')\", \"('Qatar', 'Saudi_Arabia')\", \"('New_South_Wales', 'Queensland')\", \"('Atlantic_Ocean', 'Western_Sahara')\", \"('Mali', 'Ivory_Coast')\", \"('Kazakhstan', 'Kyrgyzstan')\", \"('Lake_Victoria', 'Tanzania')\", \"('Equatorial_Guinea', 'Gabon')\", \"('Lebanon', 'Israel')\", \"('Marbella', 'Estepona')\", \"('Belarus', 'Poland')\", \"('New_Delhi', 'Gurgaon')\", \"('Colombia', 'Ecuador')\", \"('Gifu_Prefecture', 'Shiga_Prefecture')\", \"('Germany', 'Poland')\", \"('British_Virgin_Islands', 'United_States_Virgin_Islands')\", \"('Mid-Atlantic_states', 'New_England')\", \"('Vancouver', 'Burrard_Inlet')\", \"('France', 'Mediterranean_Sea')\", \"('France', 'Luxembourg')\", \"('Wyoming', 'South_Dakota')\", \"('Detroit_River', 'Detroit')\", \"('Scotland', 'England')\", \"('San_Telmo,_Buenos_Aires', 'Puerto_Madero')\", \"('River_Thames', 'London_Eye')\", \"('France', 'English_Channel')\", \"('Mozambique', 'Zimbabwe')\", \"('Thailand', 'Gulf_of_Thailand')\", \"('Bheri_Zone', 'Rapti_Zone')\", \"('San_Mateo_County', 'Santa_Clara_County')\", \"('San_Francisco', 'Golden_Gate_Bridge')\", '(\\'Marazion\\', \"St_Michael\\'s_Mount\")', \"('Oaxaca', 'Chiapas')\", \"('British_Columbia', 'Alberta')\", \"('Jordan', 'Iraq')\", \"('Greenwood_Heights', 'Park_Slope')\", \"('Ontario', 'Minnesota')\", \"('Lake_Huron', 'Michigan')\", \"('Pakistan', 'Afghanistan')\", \"('Texas', 'Louisiana')\", \"('Rajasthan', 'Gujarat')\", \"('Pemba_Island', 'Mafia_Island')\", \"('Saxony', 'Saxony-Anhalt')\", \"('Botswana', 'Namibia')\", \"('Netherlands', 'Flanders')\", \"('Ukraine', 'Moldova')\", \"('Jaisalmer', 'Bikaner')\", \"('Guinea', 'Ivory_Coast')\", \"('Tel_Aviv', 'Mediterranean_Sea')\", \"('Kentucky', 'Tennessee')\", \"('Roseau_County', 'Lake_of_the_Woods_County')\", \"('Mexico', 'Pacific_Ocean')\", \"('Romania', 'Hungary')\", \"('Papua_New_Guinea', 'Solomon_Islands')\", \"('English_Channel', 'Atlantic_Ocean')\", \"('Democratic_Republic_of_the_Congo', 'Rwanda')\", \"('Colombia', 'Brazil')\", \"('Arizona', 'Colorado')\", \"('French_Guiana', 'Suriname')\", \"('Luxembourg', 'Belgium')\", \"('Serbia', 'Croatia')\", \"('Haifa', 'Tirat_Carmel')\", \"('Santa_Fe_County', 'Bernalillo_County')\", \"('Ghana', 'Burkina_Faso')\", \"('Amadora', 'Lisbon')\", \"('Suriname', 'French_Guiana')\", \"('Greece', 'Bulgaria')\", \"('Lake_Michigan', 'Chicago')\", \"('Manitoba', 'Saskatchewan')\", \"('Saxony', 'Thuringia')\", \"('Coquitlam', 'New_Westminster')\", \"('South_Dakota', 'North_Dakota')\", \"('Gulf_of_Bothnia', 'Finland')\", \"('Czech_Republic', 'Germany')\", \"('New_Jersey', 'Philadelphia')\", \"('Minnesota', 'South_Dakota')\", \"('Oregon_Territory', 'Washington_Territory')\", \"('Palo_Alto', 'Portola_Valley')\", \"('England', 'English_Channel')\", \"('Buenos_Aires_Province', 'La_Pampa_Province')\", \"('Russia', 'Azerbaijan')\", \"('Los_Angeles_County', 'Ventura_County')\", \"('Niger', 'Burkina_Faso')\", \"('Shandong', 'Jiangsu')\", \"('Delhi', 'Gurgaon')\", \"('India', 'Nepal')\", \"('Denmark', 'Germany')\", \"('Liguria', 'Piedmont')\", \"('London_Borough_of_Hillingdon', 'London_Borough_of_Hounslow')\", \"('West_Virginia', 'Kentucky')\", \"('Ethiopia', 'Kenya')\", \"('Indian_River_County', 'Okeechobee_County')\", \"('Vizianagaram', 'Srikakulam')\", \"('Saskatchewan', 'Alberta')\", \"('New_Jersey', 'Delaware')\", \"('Czech_Republic', 'Poland')\", \"('Idaho', 'Montana')\", \"('North_Carolina', 'South_Carolina')\", \"('Black_Sea', 'Sea_of_Azov')\", \"('Persian_Gulf', 'Strait_of_Hormuz')\", \"('Hebei', 'Liaoning')\", \"('Ohio', 'Ontario')\", \"('Kingdom_of_Scotland', 'Kingdom_of_England')\", \"('Alabama', 'Mississippi')\", \"('Iowa', 'Missouri')\", \"('Syria', 'Jordan')\", \"('IG_postcode_area', 'RM_postcode_area')\", \"('Franschhoek', 'Paarl')\", \"('Rotherhithe', 'Bermondsey')\", \"('New_Hampshire', 'Maine')\", \"('Midwestern_United_States', 'Western_United_States')\", \"('San_Francisco', 'San_Mateo_County')\", \"('France', 'Bay_of_Biscay')\", \"('Somaliland', 'Gulf_of_Aden')\", \"('Guyana', 'Brazil')\", \"('Israel', 'West_Bank')\", \"('Namibia', 'Zambia')\", \"('Ukraine', 'Romania')\", \"('Milwaukee', 'Wauwatosa')\", \"('North_Governorate', 'Mount_Lebanon_Governorate')\", \"('France', 'Monaco')\", \"('Balochistan,_Pakistan', 'Sindh')\", \"('North_Korea', 'Russia')\"])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "relations_representations_str['adjoins'].keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "\n",
    "#json.dump(relations_representations_str, open('final_project/relations_representations_middle.json', 'w'))\n",
    "json.dump(text, open('final_project/relations_representations_text.json', 'w'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of observations for relation:\n",
      "\n",
      "- adjoins: 33084\n",
      "- author: 3644\n",
      "- capital: 1537\n",
      "- contains: 17939\n",
      "- film_performance: 4134\n",
      "- founders: 2445\n",
      "- genre: 464\n",
      "- has_sibling: 4787\n",
      "- has_spouse: 6606\n",
      "- is_a: 2243\n",
      "- nationality: 1899\n",
      "- parents: 1558\n",
      "- place_of_birth: 1004\n",
      "- place_of_death: 940\n",
      "- profession: 980\n",
      "- worked_at: 2018\n"
     ]
    }
   ],
   "source": [
    "def print_number_observations(relations_examples_dict:dict):\n",
    "    print('Number of observations for relation:\\n')\n",
    "    for rel in relations_examples_dict:\n",
    "        i = 0\n",
    "        for ex in relations_examples_dict[rel]:\n",
    "            i += len(relations_examples_dict[rel][ex])\n",
    "        print(f'- {rel}: {i}')\n",
    "        \n",
    "print_number_observations(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1414"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(text['adjoins'].keys())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Vector comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "\n",
    "bert_rep = json.load(open('final_project/relations_representations_middle.json'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['adjoins', 'author', 'capital', 'contains', 'film_performance', 'founders', 'genre', 'has_sibling', 'has_spouse', 'is_a', 'nationality', 'parents', 'place_of_birth', 'place_of_death', 'profession', 'worked_at'])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bert_rep.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics.pairwise import cosine_distances, euclidean_distances, haversine_distances, manhattan_distances\n",
    "\n",
    "#dist = [cosine_distances(bert_rep['adjoins'][i], bert_rep['adjoins'][j]) for i in bert_rep['adjoins'].keys() for j in bert_rep['adjoins'].keys() \n",
    "# if i != j]\n",
    "\n",
    "dist2 = [cosine_distances(bert_rep['adjoins'][i], bert_rep['author'][j]) for i in bert_rep['adjoins'].keys() for j in bert_rep['author'].keys()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics.pairwise import cosine_distances, euclidean_distances, manhattan_distances\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import normalize\n",
    "\n",
    "def _distance_within(bert_representations, relation, size_sample, distances):\n",
    "    np.random.seed(42)\n",
    "    relations = list(bert_representations[relation].keys())\n",
    "    no_examples = len(relations)\n",
    "    no_samples_relation = int(no_examples * size_sample)\n",
    "    indices_sample = np.random.randint(0, no_examples, no_samples_relation)\n",
    "    keys_in_sample = [relations[i] for i in indices_sample]\n",
    "    relations_to_consider = {relation_example: bert_representations[relation][relation_example]\n",
    "                             for relation_example in keys_in_sample}\n",
    "    distance = [distances(relations_to_consider[i], relations_to_consider[j]) for i in keys_in_sample\n",
    "                for j in keys_in_sample if i != j]\n",
    "    \n",
    "    ### Trying to normalize ###\n",
    "    distance = np.array(to_list(distance)).reshape((1,-1))\n",
    "    distance = normalize(distance)\n",
    "    \n",
    "    return distance\n",
    "\n",
    "def calculate_distances_within(bert_representations, size_sample, distances):\n",
    "    return {relation: _distance_within(bert_representations, relation, size_sample, distances)\n",
    "           for relation in bert_representations.keys()}\n",
    "\n",
    "def _distance_between(bert_representations, relation1, relation2, size_sample, distances):\n",
    "    relations_examples1 = list(bert_representations[relation1].keys())\n",
    "    relations_examples2 = list(bert_representations[relation2].keys())\n",
    "    no_examples1 = len(relations_examples1)\n",
    "    no_examples2 = len(relations_examples2)\n",
    "    no_samples_relation1 = int(no_examples1 * size_sample)\n",
    "    no_samples_relation2 = int(no_examples2 * size_sample)\n",
    "    indices_sample1 = np.random.randint(0, no_examples1, no_samples_relation1)\n",
    "    indices_sample2 = np.random.randint(0, no_examples2, no_samples_relation2)\n",
    "    keys_in_sample1 = [relations_examples1[i] for i in indices_sample1]\n",
    "    keys_in_sample2 = [relations_examples2[i] for i in indices_sample2]\n",
    "    relations_to_consider1 = {relation_example: bert_representations[relation1][relation_example]\n",
    "                             for relation_example in keys_in_sample1}\n",
    "    relations_to_consider2 = {relation_example: bert_representations[relation2][relation_example]\n",
    "                             for relation_example in keys_in_sample2}\n",
    "    distance = [distances(relations_to_consider1[i], relations_to_consider2[j]) \n",
    "                for i in keys_in_sample1 for j in keys_in_sample2]\n",
    "    \n",
    "    ### Trying to normalize ###\n",
    "    distance = np.array(to_list(distance)).reshape((1,-1))\n",
    "    distance = normalize(distance)\n",
    "    \n",
    "    return np.mean(distance)\n",
    "\n",
    "def calculate_distances_between(bert_representations, size_sample, distances):\n",
    "    relations = list(bert_representations.keys())\n",
    "    combination_relations = [(i, j) for i in relations for j in relations if i != j]\n",
    "    return {str((relation1, relation2)): _distance_between(bert_representations, relation1, relation2, size_sample, distances)\n",
    "           for relation1, relation2 in combination_relations}\n",
    "\n",
    "def mean_distance(distances_dict):\n",
    "    return {key : np.mean(list(map(lambda x: x[0][0], distances_dict[key]))) for key in distances_dict}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "distances_within = calculate_distances_within(bert_rep, 0.1, cosine_distances)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "distances_between = calculate_distances_between(bert_rep, 0.1, cosine_distances)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.00020931, -0.00248514,  0.00433086, ..., -0.00017136,\n",
       "        -0.00071226, -0.0004774 ]])"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#print(combination_relations[0])\n",
    "#print(distances_within['author'])\n",
    "distances_between[str(combination_relations[0])] - distances_within['author']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "relations = list(bert_rep.keys())\n",
    "combination_relations = [(i, j) for i in relations for j in relations if i != j]\n",
    "distances_absolute = {str((relation1, relation2)): distances_between[str((relation1, relation2))] - distances_within[relation2]\n",
    "                         for relation1, relation2 in combination_relations}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def to_list(lst_of_arrays:list):\n",
    "    return list(map(lambda x:x[0][0], lst_of_arrays))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.00705814 0.00935654 0.00251431 ... 0.00709501 0.00764712 0.00742618]\n"
     ]
    }
   ],
   "source": [
    "print(distances_within['author'][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "distances = []\n",
    "rel = []\n",
    "for relation in distances_within.keys():\n",
    "    dist = distances_within[relation][0]\n",
    "    distances.extend(dist)\n",
    "    rel.extend([relation] * len(dist))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from plotnine import *\n",
    "%matplotlib inline\n",
    "\n",
    "#type_ =  np.array(['adjoins']*len(n))\n",
    "df = pd.DataFrame({'Distance': distances, 'Relations': rel})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<ggplot: (-9223363254812009100)>"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(ggplot(df)\n",
    "     + geom_boxplot(aes('Relations', 'Distance'))\n",
    ") + theme(axis_text_x  = element_text(angle = 90, hjust = 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "import ast\n",
    "\n",
    "rel = list(map(lambda x : ast.literal_eval(x)[0], distances_between.keys()))\n",
    "mean_distances_between = list(map(lambda x:distances_between[x], distances_between.keys()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<ggplot: (8782042968773)>"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_between = pd.DataFrame({'Distance': mean_distances_between, 'Relations': rel})\n",
    "(ggplot(df_between)\n",
    "     + geom_boxplot(aes('Relations', 'Distance')) \n",
    "     + geom_boxplot(aes('Relations', 'Distance'), data=df, color='red', fill='red', alpha=0.3)\n",
    ") + theme(axis_text_x  = element_text(angle = 90, hjust = 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.mean(mean_distances_between)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mean_distances_within = list(map(lambda x:distances_within[x][0][0][0], distances_within.keys()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.mean(mean_distances_within)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
