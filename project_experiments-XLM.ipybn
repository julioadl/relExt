{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "import torch\n",
    "from transformers import *\n",
    "\n",
    "class relationEmbeddings:\n",
    "    def __init__(self, tokenizer, model):\n",
    "        self._tokenizer = tokenizer.from_pretrained('xlm-mlm-xnli15-1024')\n",
    "        self._model = model.from_pretrained('xlm-mlm-xnli15-1024', output_hidden_states = True).cuda()\n",
    "        self._model.eval()\n",
    "        \n",
    "    def tokenize(self, sentence):\n",
    "        marked_sentence = sentence #'[CLS] ' + sentence + ' [SEP]'\n",
    "        tokenized_text = self._tokenizer.tokenize(marked_sentence)\n",
    "        return tokenized_text\n",
    "    \n",
    "    def get_embeddings(self, sentence):\n",
    "        tokenized_text = self.tokenize(sentence)\n",
    "        indexed_tokens = self._tokenizer.convert_tokens_to_ids(tokenized_text)\n",
    "        segment_ids = [1]*len(tokenized_text)\n",
    "        \n",
    "        #Convert to tensor\n",
    "        tokens_tensor = torch.tensor([indexed_tokens]).cuda()\n",
    "        segment_tensors = torch.tensor([segment_ids]).cuda()\n",
    "        \n",
    "        with torch.no_grad():\n",
    "            encoded_layers = self._model(tokens_tensor, segment_tensors)\n",
    "            \n",
    "        return encoded_layers[-1][0:12]\n",
    "    \n",
    "    def sentence2vec(self, sentence):\n",
    "        '''\n",
    "        Returns concatenated hidden dimensions\n",
    "        '''\n",
    "        encoded_layers = self.get_embeddings(sentence)\n",
    "        token_embeddings = []\n",
    "        tokenized_text = self.tokenize(sentence)\n",
    "        #What is is batch? The number of sentences passed\n",
    "        batch_i = 0\n",
    "        for token_i in range(len(tokenized_text)):\n",
    "            hidden_layers = []\n",
    "            for layer_i in range(len(encoded_layers)):\n",
    "                vec = encoded_layers[layer_i][batch_i][token_i]\n",
    "                hidden_layers.append(list(vec.cpu().detach().numpy()))\n",
    "                \n",
    "            token_embeddings.append(hidden_layers)\n",
    "            \n",
    "        #Concatenate embeddings\n",
    "        token_vecs_concat = []\n",
    "        for token in token_embeddings:\n",
    "            concat_embeddings = np.concatenate(token[-4:], axis=0)\n",
    "            token_vecs_concat.append(list(concat_embeddings))\n",
    "            return token_vecs_concat#.ravel().tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "re = relationEmbeddings(XLMTokenizer, XLMWithLMHeadModel)\n",
    "#torch.cuda.get_device_name(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import rel_ext\n",
    "import utils\n",
    "import os\n",
    "\n",
    "utils.fix_random_seeds()\n",
    "rel_ext_data_home = os.path.join('data', 'rel_ext_data')\n",
    "\n",
    "corpus = rel_ext.Corpus(os.path.join(rel_ext_data_home, 'corpus.tsv.gz'))\n",
    "kb = rel_ext.KB(os.path.join(rel_ext_data_home, 'kb.tsv.gz'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "\n",
    "### Generate representation for adjoins\n",
    "\n",
    "def _get_tuples_for_relation(relation:str):\n",
    "    return list(map(lambda x:(x.sbj, x.obj), kb.get_triples_for_relation(relation)))\n",
    "\n",
    "def _get_text_for_examples(corpus_example):\n",
    "    return corpus_example.middle\n",
    "\n",
    "def _get_examples_for_relation(list_entities:list):\n",
    "    all_relations_examples = {}\n",
    "    for entities in list_entities:\n",
    "        examples = corpus.get_examples_for_entities(entities[0], entities[1])\n",
    "        if len(corpus.get_examples_for_entities(entities[0], entities[1])) > 0:\n",
    "            all_relations_examples[str(entities)] = list(map(lambda x:_get_text_for_examples(x), corpus.get_examples_for_entities(entities[0], entities[1])))\n",
    "        else:\n",
    "            continue         \n",
    "    return all_relations_examples\n",
    "\n",
    "#Uses np.mean just to keep dimensions\n",
    "def _get_bert_representations(dict_entities: dict, sentence2vecFn):\n",
    "    entities_representations = {}\n",
    "    for entities in dict_entities:\n",
    "        bert_representations = []\n",
    "        for example in dict_entities[entities]:\n",
    "            try:\n",
    "                rep = sentence2vecFn(example)\n",
    "            except:\n",
    "                continue\n",
    "            bert_representations.append(rep)\n",
    "            \n",
    "        entities_representations[entities] = np.mean(bert_representations, axis=0)\n",
    "        \n",
    "    return entities_representations         \n",
    "\n",
    "#Wrapper for obtaining text for relations\n",
    "def get_text_for_relation(relation:str):\n",
    "    tuples_in_relation = _get_tuples_for_relation(relation)\n",
    "    return _get_examples_for_relation(tuples_in_relation)\n",
    "\n",
    "def get_dict_of_relations_bert_vecs(dict_relations_text:dict, sentence2vecFn):\n",
    "    return {entity: _get_bert_representations(dict_relations_text[entity], sentence2vecFn) for entity in dict_relations_text}\n",
    "\n",
    "def vectorize_logic(text: list, vocabulary:list):\n",
    "    vectorizer = CountVectorizer(vocabulary)\n",
    "    X = vectorizer.fit(text)\n",
    "    return X.to_array()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Get all relations\n",
    "\n",
    "all_relations = [i for i in kb.all_relations]\n",
    "\n",
    "#Obtain their text from examples:\n",
    "text = {relation: get_text_for_relation(relation) for relation in all_relations}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Relation: adjoins with number of examples 1414\n",
      "Relation: author with number of examples 1450\n",
      "Relation: capital with number of examples 298\n",
      "Relation: contains with number of examples 7123\n",
      "Relation: film_performance with number of examples 2074\n",
      "Relation: founders with number of examples 1023\n",
      "Relation: genre with number of examples 297\n",
      "Relation: has_sibling with number of examples 1653\n",
      "Relation: has_spouse with number of examples 1986\n",
      "Relation: is_a with number of examples 1243\n",
      "Relation: nationality with number of examples 940\n",
      "Relation: parents with number of examples 885\n",
      "Relation: place_of_birth with number of examples 692\n",
      "Relation: place_of_death with number of examples 514\n",
      "Relation: profession with number of examples 676\n",
      "Relation: worked_at with number of examples 829\n"
     ]
    }
   ],
   "source": [
    "for relation in all_relations:\n",
    "    print(f'Relation: {relation} with number of examples {len(text[relation])}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/numpy/core/fromnumeric.py:3335: RuntimeWarning: Mean of empty slice.\n",
      "  out=out, **kwargs)\n",
      "/usr/local/lib/python3.6/dist-packages/numpy/core/_methods.py:161: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  ret = ret.dtype.type(ret / rcount)\n"
     ]
    }
   ],
   "source": [
    "relations_representations_middle = get_dict_of_relations_bert_vecs(text, re.sentence2vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.1321766 ,  0.03095803,  0.45720497, ...,  0.04959196,\n",
       "         1.3937335 , -2.3551943 ]], dtype=float32)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "relations_representations_middle['adjoins'][\"('France', 'Spain')\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "relations_representations_str = {}\n",
    "for rel in relations_representations_middle:\n",
    "    relations_representations_str[rel] = {}\n",
    "    for ex in relations_representations_middle[rel]:\n",
    "        relations_representations_str[rel][str(ex)] = relations_representations_middle[rel][ex].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[-1.1321766376495361,\n",
       "  0.03095802664756775,\n",
       "  0.4572049677371979,\n",
       "  0.766682505607605,\n",
       "  -0.7679498195648193,\n",
       "  -0.8478583097457886,\n",
       "  -1.176792025566101,\n",
       "  0.04596758633852005,\n",
       "  0.2464265078306198,\n",
       "  -1.478560447692871,\n",
       "  -0.7350213527679443,\n",
       "  0.5450800061225891,\n",
       "  0.5561854243278503,\n",
       "  -0.20218303799629211,\n",
       "  -0.21111717820167542,\n",
       "  -0.48985755443573,\n",
       "  0.20472615957260132,\n",
       "  -0.08535156399011612,\n",
       "  -2.045006036758423,\n",
       "  0.09885347634553909,\n",
       "  0.18782520294189453,\n",
       "  0.15757805109024048,\n",
       "  0.6435815095901489,\n",
       "  0.05673334002494812,\n",
       "  -0.28908103704452515,\n",
       "  0.6302729845046997,\n",
       "  -0.7466074824333191,\n",
       "  -1.0228229761123657,\n",
       "  -1.6389226913452148,\n",
       "  0.8540293574333191,\n",
       "  1.0365805625915527,\n",
       "  1.0632524490356445,\n",
       "  -0.3224712908267975,\n",
       "  -0.998543381690979,\n",
       "  -0.513751208782196,\n",
       "  -0.36416804790496826,\n",
       "  0.004585864022374153,\n",
       "  -0.28252410888671875,\n",
       "  -0.2102183997631073,\n",
       "  -0.3083184063434601,\n",
       "  0.3572341799736023,\n",
       "  0.9739481806755066,\n",
       "  -0.5418051481246948,\n",
       "  0.3080817461013794,\n",
       "  -0.3000524640083313,\n",
       "  -0.03658453747630119,\n",
       "  0.9608538150787354,\n",
       "  0.10668222606182098,\n",
       "  0.8672609329223633,\n",
       "  -1.6337571144104004,\n",
       "  1.385377287864685,\n",
       "  -0.3192027509212494,\n",
       "  -0.23409157991409302,\n",
       "  -0.38161301612854004,\n",
       "  -1.593186616897583,\n",
       "  -0.5875439047813416,\n",
       "  1.7540708780288696,\n",
       "  0.5553256273269653,\n",
       "  -1.7627594470977783,\n",
       "  1.6587251424789429,\n",
       "  -0.43520641326904297,\n",
       "  0.3174062669277191,\n",
       "  -0.1918892115354538,\n",
       "  0.05940244719386101,\n",
       "  -0.2919909656047821,\n",
       "  -0.23166675865650177,\n",
       "  -0.17197363078594208,\n",
       "  0.14039385318756104,\n",
       "  0.17498674988746643,\n",
       "  -2.0855371952056885,\n",
       "  0.030176501721143723,\n",
       "  0.33388757705688477,\n",
       "  0.4563724398612976,\n",
       "  -0.7833741307258606,\n",
       "  0.7408985495567322,\n",
       "  0.5671754479408264,\n",
       "  -0.15440914034843445,\n",
       "  1.4922082424163818,\n",
       "  0.07324235141277313,\n",
       "  -0.6713805198669434,\n",
       "  -0.16232874989509583,\n",
       "  -0.78569096326828,\n",
       "  0.7834846377372742,\n",
       "  -1.7595958709716797,\n",
       "  -2.5552773475646973,\n",
       "  0.5359310507774353,\n",
       "  -0.032684069126844406,\n",
       "  -0.35993504524230957,\n",
       "  -0.7431237101554871,\n",
       "  1.0232114791870117,\n",
       "  0.16255925595760345,\n",
       "  -0.44171780347824097,\n",
       "  -0.677604615688324,\n",
       "  0.4795290529727936,\n",
       "  0.09714380651712418,\n",
       "  1.1730061769485474,\n",
       "  -0.08355662226676941,\n",
       "  0.45573845505714417,\n",
       "  0.9231237173080444,\n",
       "  0.8356416821479797,\n",
       "  -0.1383240818977356,\n",
       "  0.697541356086731,\n",
       "  -0.6618407368659973,\n",
       "  0.4293724298477173,\n",
       "  -0.20630723237991333,\n",
       "  -0.005977729335427284,\n",
       "  1.1922872066497803,\n",
       "  -0.6966485977172852,\n",
       "  -0.6737717390060425,\n",
       "  0.27206748723983765,\n",
       "  0.14131797850131989,\n",
       "  0.45774099230766296,\n",
       "  -0.040086619555950165,\n",
       "  -0.5668084025382996,\n",
       "  0.6216800808906555,\n",
       "  -0.5038298964500427,\n",
       "  -0.3971487879753113,\n",
       "  0.3432076871395111,\n",
       "  0.36025142669677734,\n",
       "  -0.49105578660964966,\n",
       "  -0.8956112861633301,\n",
       "  -0.14141421020030975,\n",
       "  0.0024455543607473373,\n",
       "  0.652103841304779,\n",
       "  -0.4499458968639374,\n",
       "  -0.19313983619213104,\n",
       "  1.1958016157150269,\n",
       "  0.9001699686050415,\n",
       "  -1.210358738899231,\n",
       "  -0.7186919450759888,\n",
       "  0.3199317455291748,\n",
       "  0.32535016536712646,\n",
       "  -1.8163756132125854,\n",
       "  -0.1345890611410141,\n",
       "  0.6843239068984985,\n",
       "  -0.7572846412658691,\n",
       "  0.2619626224040985,\n",
       "  -0.6847970485687256,\n",
       "  0.09463892877101898,\n",
       "  0.08643170446157455,\n",
       "  0.43247348070144653,\n",
       "  -1.1856307983398438,\n",
       "  0.8701190948486328,\n",
       "  1.6940549612045288,\n",
       "  -0.3890880048274994,\n",
       "  -1.1540888547897339,\n",
       "  -1.7387548685073853,\n",
       "  0.19393397867679596,\n",
       "  1.1759428977966309,\n",
       "  0.6855245232582092,\n",
       "  -0.4623056948184967,\n",
       "  0.8097255229949951,\n",
       "  -0.27341386675834656,\n",
       "  -0.14757569134235382,\n",
       "  -0.7222147583961487,\n",
       "  0.710030734539032,\n",
       "  1.1609779596328735,\n",
       "  -0.05542311072349548,\n",
       "  1.1660611629486084,\n",
       "  0.9825371503829956,\n",
       "  -0.22747473418712616,\n",
       "  -0.5107491612434387,\n",
       "  -0.37846729159355164,\n",
       "  0.7712386846542358,\n",
       "  0.7941746711730957,\n",
       "  -0.38599520921707153,\n",
       "  1.0560163259506226,\n",
       "  0.5115814208984375,\n",
       "  0.5126579403877258,\n",
       "  -0.546339750289917,\n",
       "  -0.15306153893470764,\n",
       "  -0.8773922324180603,\n",
       "  -0.029369965195655823,\n",
       "  -0.14597256481647491,\n",
       "  0.6918998956680298,\n",
       "  0.6502954363822937,\n",
       "  -0.20326949656009674,\n",
       "  0.7661035656929016,\n",
       "  -0.5895682573318481,\n",
       "  0.3693748712539673,\n",
       "  -1.6528565883636475,\n",
       "  -0.46587318181991577,\n",
       "  -0.3493601381778717,\n",
       "  -0.28030914068222046,\n",
       "  0.3665599226951599,\n",
       "  0.6421169638633728,\n",
       "  0.2437068521976471,\n",
       "  -0.3701522946357727,\n",
       "  0.2531949281692505,\n",
       "  0.5977956056594849,\n",
       "  0.6539469361305237,\n",
       "  -0.7287114858627319,\n",
       "  -1.1900240182876587,\n",
       "  0.08685865998268127,\n",
       "  -0.11347481608390808,\n",
       "  0.33029741048812866,\n",
       "  0.1076231524348259,\n",
       "  1.4135169982910156,\n",
       "  0.8122480511665344,\n",
       "  0.8001061677932739,\n",
       "  0.732771635055542,\n",
       "  1.2753899097442627,\n",
       "  -0.4155166745185852,\n",
       "  -0.2637123763561249,\n",
       "  0.39030760526657104,\n",
       "  0.4838639199733734,\n",
       "  1.2054580450057983,\n",
       "  -0.28654104471206665,\n",
       "  1.6316981315612793,\n",
       "  -0.9119101762771606,\n",
       "  0.1430622786283493,\n",
       "  -1.2079639434814453,\n",
       "  -0.23668158054351807,\n",
       "  1.102919101715088,\n",
       "  -1.0367575883865356,\n",
       "  -0.49733996391296387,\n",
       "  0.17419102787971497,\n",
       "  -0.08003699779510498,\n",
       "  0.4036381244659424,\n",
       "  1.5425386428833008,\n",
       "  -0.36106008291244507,\n",
       "  0.13139241933822632,\n",
       "  -0.11199192702770233,\n",
       "  -0.208088681101799,\n",
       "  0.4282095432281494,\n",
       "  -0.22330869734287262,\n",
       "  0.022069264203310013,\n",
       "  -0.13330256938934326,\n",
       "  -0.5823268890380859,\n",
       "  0.8258787989616394,\n",
       "  -0.5332573056221008,\n",
       "  -0.002614667871966958,\n",
       "  1.0911118984222412,\n",
       "  -0.5972316861152649,\n",
       "  -0.37444207072257996,\n",
       "  0.11644603312015533,\n",
       "  -0.1482788622379303,\n",
       "  0.1480119526386261,\n",
       "  -0.27599242329597473,\n",
       "  1.5578248500823975,\n",
       "  0.6981135010719299,\n",
       "  0.19583454728126526,\n",
       "  -0.14184269309043884,\n",
       "  1.1318449974060059,\n",
       "  -1.907301425933838,\n",
       "  0.26258471608161926,\n",
       "  -0.8451932668685913,\n",
       "  0.28978368639945984,\n",
       "  0.28593286871910095,\n",
       "  -0.31578174233436584,\n",
       "  0.4302372634410858,\n",
       "  1.1891306638717651,\n",
       "  0.21567997336387634,\n",
       "  -0.800707221031189,\n",
       "  -1.0079755783081055,\n",
       "  -0.3901614844799042,\n",
       "  -0.24553346633911133,\n",
       "  -0.9972323775291443,\n",
       "  -0.0842566043138504,\n",
       "  0.027844049036502838,\n",
       "  0.22921521961688995,\n",
       "  0.8116726279258728,\n",
       "  0.19095048308372498,\n",
       "  -0.3002477288246155,\n",
       "  1.405239462852478,\n",
       "  -0.6029079556465149,\n",
       "  0.9633848667144775,\n",
       "  -0.5561851263046265,\n",
       "  -0.2648373246192932,\n",
       "  -0.3181614279747009,\n",
       "  -0.2654591500759125,\n",
       "  0.17962701618671417,\n",
       "  0.1795279085636139,\n",
       "  0.2514546811580658,\n",
       "  -1.508575201034546,\n",
       "  0.049951545894145966,\n",
       "  -1.6734418869018555,\n",
       "  1.0644227266311646,\n",
       "  -0.7401054501533508,\n",
       "  0.7731121182441711,\n",
       "  -0.03948717564344406,\n",
       "  0.29756179451942444,\n",
       "  -0.6326046586036682,\n",
       "  0.5723282694816589,\n",
       "  1.7247085571289062,\n",
       "  0.34465527534484863,\n",
       "  0.939103364944458,\n",
       "  0.14254656434059143,\n",
       "  0.5963188409805298,\n",
       "  25.81753921508789,\n",
       "  1.2034307718276978,\n",
       "  0.35188353061676025,\n",
       "  -0.2703968286514282,\n",
       "  -0.959618330001831,\n",
       "  0.9453690648078918,\n",
       "  -0.64327073097229,\n",
       "  -1.2443825006484985,\n",
       "  -0.4754309356212616,\n",
       "  0.5373116731643677,\n",
       "  0.8104264140129089,\n",
       "  0.16988083720207214,\n",
       "  0.7267085313796997,\n",
       "  0.27381739020347595,\n",
       "  -1.526227593421936,\n",
       "  0.18400493264198303,\n",
       "  -0.13982358574867249,\n",
       "  -0.13775601983070374,\n",
       "  -1.0779269933700562,\n",
       "  1.1432559490203857,\n",
       "  0.523673415184021,\n",
       "  -0.18402954936027527,\n",
       "  0.34303730726242065,\n",
       "  0.34679409861564636,\n",
       "  -1.169792652130127,\n",
       "  0.4920462965965271,\n",
       "  0.8570517897605896,\n",
       "  0.6910563707351685,\n",
       "  -1.1199796199798584,\n",
       "  0.35679852962493896,\n",
       "  0.2454814612865448,\n",
       "  -0.6245238184928894,\n",
       "  -0.5296581387519836,\n",
       "  0.023046426475048065,\n",
       "  -0.10551290214061737,\n",
       "  0.20547164976596832,\n",
       "  0.6642554402351379,\n",
       "  1.5005803108215332,\n",
       "  -0.8112796545028687,\n",
       "  -0.6088736653327942,\n",
       "  0.1906154453754425,\n",
       "  -1.1587517261505127,\n",
       "  -0.24056775867938995,\n",
       "  -1.1696152687072754,\n",
       "  0.4430328905582428,\n",
       "  0.17286309599876404,\n",
       "  -0.21156254410743713,\n",
       "  0.24511465430259705,\n",
       "  -0.18533694744110107,\n",
       "  -0.111733578145504,\n",
       "  0.8605294823646545,\n",
       "  -0.6632620692253113,\n",
       "  -1.4361082315444946,\n",
       "  -0.07839753478765488,\n",
       "  0.683752715587616,\n",
       "  -0.20064611732959747,\n",
       "  -1.7168066501617432,\n",
       "  -0.4122866690158844,\n",
       "  0.9590792655944824,\n",
       "  0.8141308426856995,\n",
       "  1.1953901052474976,\n",
       "  -0.10974779725074768,\n",
       "  -0.06289114058017731,\n",
       "  -2.185309648513794,\n",
       "  1.6088199615478516,\n",
       "  0.13925683498382568,\n",
       "  0.5991466641426086,\n",
       "  0.06413011997938156,\n",
       "  -0.0838739350438118,\n",
       "  0.10353076457977295,\n",
       "  -0.5825830698013306,\n",
       "  0.28896594047546387,\n",
       "  -0.34565386176109314,\n",
       "  0.6327697038650513,\n",
       "  0.5658312439918518,\n",
       "  -0.8094794750213623,\n",
       "  -0.5845573544502258,\n",
       "  -0.03436483070254326,\n",
       "  0.6216942667961121,\n",
       "  0.48900899291038513,\n",
       "  -1.508193016052246,\n",
       "  -0.305290162563324,\n",
       "  0.7586447596549988,\n",
       "  -0.5175061225891113,\n",
       "  0.5292701125144958,\n",
       "  1.0312297344207764,\n",
       "  0.09378861635923386,\n",
       "  0.7106274366378784,\n",
       "  -0.16760195791721344,\n",
       "  -1.2407615184783936,\n",
       "  -0.5283517241477966,\n",
       "  0.38276124000549316,\n",
       "  -0.6610977649688721,\n",
       "  -1.4995145797729492,\n",
       "  0.17818574607372284,\n",
       "  1.5352190732955933,\n",
       "  0.5517394542694092,\n",
       "  0.14350654184818268,\n",
       "  0.013967561535537243,\n",
       "  0.5263445973396301,\n",
       "  0.5002766251564026,\n",
       "  -0.4535995423793793,\n",
       "  0.3669798672199249,\n",
       "  -0.5047207474708557,\n",
       "  0.07065962255001068,\n",
       "  0.14605528116226196,\n",
       "  -0.42699018120765686,\n",
       "  -1.2144190073013306,\n",
       "  -0.6255390048027039,\n",
       "  -1.974689245223999,\n",
       "  -1.227272868156433,\n",
       "  -0.16672518849372864,\n",
       "  -1.0408402681350708,\n",
       "  -0.5405585765838623,\n",
       "  0.27322542667388916,\n",
       "  -0.1503915935754776,\n",
       "  -0.5242099761962891,\n",
       "  -0.1709522157907486,\n",
       "  -1.2732576131820679,\n",
       "  1.513623833656311,\n",
       "  0.06533049792051315,\n",
       "  1.0601364374160767,\n",
       "  1.2356278896331787,\n",
       "  0.8865882754325867,\n",
       "  -0.5269156694412231,\n",
       "  -1.0995761156082153,\n",
       "  -0.7617321014404297,\n",
       "  -0.011384841986000538,\n",
       "  0.13488110899925232,\n",
       "  -1.1822608709335327,\n",
       "  0.4025079905986786,\n",
       "  -0.06430947780609131,\n",
       "  -0.540839672088623,\n",
       "  0.26392167806625366,\n",
       "  0.03573703020811081,\n",
       "  -0.4611668288707733,\n",
       "  0.26793789863586426,\n",
       "  -0.07613997906446457,\n",
       "  -0.9291208982467651,\n",
       "  0.3567955493927002,\n",
       "  -0.7061837911605835,\n",
       "  0.09694822132587433,\n",
       "  1.2699023485183716,\n",
       "  0.12460221350193024,\n",
       "  0.4241138696670532,\n",
       "  -0.08104152977466583,\n",
       "  -0.37098613381385803,\n",
       "  -0.06148843467235565,\n",
       "  2.7721614837646484,\n",
       "  0.4080919325351715,\n",
       "  1.3288443088531494,\n",
       "  0.5764498114585876,\n",
       "  -0.6307399272918701,\n",
       "  1.9353429079055786,\n",
       "  -0.2804946303367615,\n",
       "  -0.13401880860328674,\n",
       "  0.5571027994155884,\n",
       "  1.1107209920883179,\n",
       "  -0.29866430163383484,\n",
       "  -0.6740480065345764,\n",
       "  -1.0227011442184448,\n",
       "  -0.03955422714352608,\n",
       "  1.1501349210739136,\n",
       "  1.4990596771240234,\n",
       "  0.8106083273887634,\n",
       "  0.6470566987991333,\n",
       "  -0.5709788799285889,\n",
       "  -0.2246236950159073,\n",
       "  -0.6047221422195435,\n",
       "  0.371609628200531,\n",
       "  0.3505064845085144,\n",
       "  -0.06595543026924133,\n",
       "  -1.5985372066497803,\n",
       "  0.11724305897951126,\n",
       "  0.6088572144508362,\n",
       "  -0.3411182463169098,\n",
       "  0.37589335441589355,\n",
       "  0.709959089756012,\n",
       "  0.7747552394866943,\n",
       "  0.3477088510990143,\n",
       "  0.13175085186958313,\n",
       "  -0.3848363757133484,\n",
       "  0.0049399565905332565,\n",
       "  0.4787634015083313,\n",
       "  0.9158412218093872,\n",
       "  -0.4398117959499359,\n",
       "  0.7207012176513672,\n",
       "  0.191873237490654,\n",
       "  -0.3393123745918274,\n",
       "  -0.3378103971481323,\n",
       "  -0.3659074306488037,\n",
       "  1.604692816734314,\n",
       "  0.27434349060058594,\n",
       "  0.29345962405204773,\n",
       "  -0.7187918424606323,\n",
       "  0.018793076276779175,\n",
       "  -0.41797471046447754,\n",
       "  0.05720885097980499,\n",
       "  -1.4047486782073975,\n",
       "  0.8588216304779053,\n",
       "  -0.525817334651947,\n",
       "  -0.33735761046409607,\n",
       "  -2.114790201187134,\n",
       "  0.47709670662879944,\n",
       "  1.0401592254638672,\n",
       "  1.5862559080123901,\n",
       "  -0.28581053018569946,\n",
       "  0.22481539845466614,\n",
       "  -0.3000331521034241,\n",
       "  -0.5459343791007996,\n",
       "  -0.714394748210907,\n",
       "  0.47187095880508423,\n",
       "  1.0843703746795654,\n",
       "  -0.9411832094192505,\n",
       "  1.123457431793213,\n",
       "  -0.7578741908073425,\n",
       "  0.6017122864723206,\n",
       "  -0.0007229734910652041,\n",
       "  0.19046401977539062,\n",
       "  1.678609848022461,\n",
       "  1.0812909603118896,\n",
       "  -0.7628673315048218,\n",
       "  0.8938046097755432,\n",
       "  1.06803560256958,\n",
       "  0.08070220798254013,\n",
       "  0.6031385660171509,\n",
       "  1.5973293781280518,\n",
       "  -0.39806658029556274,\n",
       "  -0.29860928654670715,\n",
       "  0.05187413468956947,\n",
       "  0.14507688581943512,\n",
       "  0.6782701015472412,\n",
       "  -0.08285564184188843,\n",
       "  -1.802594780921936,\n",
       "  -0.3169090747833252,\n",
       "  0.2726789116859436,\n",
       "  0.743506669998169,\n",
       "  -0.3893786370754242,\n",
       "  0.7252253293991089,\n",
       "  0.8480885028839111,\n",
       "  -1.2655338048934937,\n",
       "  0.1435215175151825,\n",
       "  0.7636936902999878,\n",
       "  -0.8297902941703796,\n",
       "  0.14826354384422302,\n",
       "  -0.91767817735672,\n",
       "  -0.690281867980957,\n",
       "  -1.0187404155731201,\n",
       "  -0.48300701379776,\n",
       "  -0.7843384146690369,\n",
       "  0.6320804953575134,\n",
       "  1.6882069110870361,\n",
       "  0.07698714733123779,\n",
       "  0.2821756601333618,\n",
       "  -0.2762439250946045,\n",
       "  -0.4413416087627411,\n",
       "  -0.19508588314056396,\n",
       "  0.5035198926925659,\n",
       "  -0.09595805406570435,\n",
       "  0.2607540488243103,\n",
       "  0.6902875304222107,\n",
       "  -0.202994704246521,\n",
       "  0.008443333208560944,\n",
       "  -0.714137613773346,\n",
       "  0.8057866096496582,\n",
       "  -0.8775010108947754,\n",
       "  1.1322325468063354,\n",
       "  0.37517818808555603,\n",
       "  0.1314494013786316,\n",
       "  -0.8623154759407043,\n",
       "  -0.31315362453460693,\n",
       "  -0.21268966794013977,\n",
       "  -1.1071382761001587,\n",
       "  0.22478817403316498,\n",
       "  -0.2523394227027893,\n",
       "  0.5286098718643188,\n",
       "  -0.9041914939880371,\n",
       "  -0.538267195224762,\n",
       "  -0.5276413559913635,\n",
       "  0.23432405292987823,\n",
       "  -1.0319955348968506,\n",
       "  0.37375542521476746,\n",
       "  0.3776969313621521,\n",
       "  1.358027696609497,\n",
       "  0.33365097641944885,\n",
       "  -0.2962135970592499,\n",
       "  1.3413742780685425,\n",
       "  -0.09431701898574829,\n",
       "  -0.5914568305015564,\n",
       "  -0.8226034641265869,\n",
       "  -0.2697596848011017,\n",
       "  -0.07209566980600357,\n",
       "  -0.6126801371574402,\n",
       "  0.2321821004152298,\n",
       "  -0.17925988137722015,\n",
       "  0.5846099257469177,\n",
       "  0.7743772864341736,\n",
       "  0.03179292380809784,\n",
       "  -0.8455320000648499,\n",
       "  -0.26292893290519714,\n",
       "  -1.4810887575149536,\n",
       "  -0.5214739441871643,\n",
       "  0.17566342651844025,\n",
       "  0.4255906641483307,\n",
       "  -0.5351512432098389,\n",
       "  -0.229973703622818,\n",
       "  1.3544940948486328,\n",
       "  -0.5518085360527039,\n",
       "  -0.5239971280097961,\n",
       "  -0.7268996238708496,\n",
       "  -0.9249385595321655,\n",
       "  -0.011413447558879852,\n",
       "  -0.8017938733100891,\n",
       "  -0.40408334136009216,\n",
       "  0.429243266582489,\n",
       "  -0.7520884871482849,\n",
       "  -0.15203993022441864,\n",
       "  -0.32202383875846863,\n",
       "  -0.8147761225700378,\n",
       "  -0.04739230126142502,\n",
       "  0.22282801568508148,\n",
       "  -1.6066349744796753,\n",
       "  0.20305487513542175,\n",
       "  0.0849771797657013,\n",
       "  0.4833745062351227,\n",
       "  0.20277266204357147,\n",
       "  -0.6444682478904724,\n",
       "  -0.44043079018592834,\n",
       "  0.8509774208068848,\n",
       "  -0.8187417984008789,\n",
       "  0.29260361194610596,\n",
       "  0.2751394510269165,\n",
       "  -0.8618587255477905,\n",
       "  -1.184067964553833,\n",
       "  0.5456193089485168,\n",
       "  -0.2617286443710327,\n",
       "  0.7148880958557129,\n",
       "  0.22800645232200623,\n",
       "  -0.3965839743614197,\n",
       "  -0.44878089427948,\n",
       "  0.42091646790504456,\n",
       "  0.3238525688648224,\n",
       "  -0.005780721083283424,\n",
       "  0.03720230981707573,\n",
       "  0.18436935544013977,\n",
       "  0.7925787568092346,\n",
       "  1.0763970613479614,\n",
       "  0.4688045382499695,\n",
       "  -1.2641575336456299,\n",
       "  -0.4608672857284546,\n",
       "  -0.8396226763725281,\n",
       "  -0.40014684200286865,\n",
       "  0.4108297526836395,\n",
       "  0.6563286781311035,\n",
       "  -0.3577967882156372,\n",
       "  -1.7062476873397827,\n",
       "  -0.34204167127609253,\n",
       "  -0.5787281394004822,\n",
       "  0.2348913699388504,\n",
       "  -0.08385983854532242,\n",
       "  0.8930700421333313,\n",
       "  0.316364049911499,\n",
       "  0.0710124745965004,\n",
       "  -0.2877251207828522,\n",
       "  -0.13561563193798065,\n",
       "  0.12452013790607452,\n",
       "  0.2549440860748291,\n",
       "  -0.2501711845397949,\n",
       "  0.8846327662467957,\n",
       "  0.5122879147529602,\n",
       "  0.059383463114500046,\n",
       "  -0.41342753171920776,\n",
       "  -0.035767652094364166,\n",
       "  -0.06146244332194328,\n",
       "  -0.4047195613384247,\n",
       "  -0.3510531485080719,\n",
       "  0.041883643716573715,\n",
       "  -1.590798258781433,\n",
       "  0.7433303594589233,\n",
       "  0.3008020222187042,\n",
       "  0.3973618149757385,\n",
       "  0.08986341208219528,\n",
       "  0.05650885030627251,\n",
       "  -1.1302615404129028,\n",
       "  -0.06988101452589035,\n",
       "  -0.27673855423927307,\n",
       "  0.18981368839740753,\n",
       "  0.7463493943214417,\n",
       "  -0.4625152051448822,\n",
       "  -0.3777865171432495,\n",
       "  -1.1543034315109253,\n",
       "  -1.112788200378418,\n",
       "  -0.9192320108413696,\n",
       "  0.038273196667432785,\n",
       "  -0.4818078875541687,\n",
       "  -0.42441287636756897,\n",
       "  0.3673839867115021,\n",
       "  1.4080250263214111,\n",
       "  -0.6086403131484985,\n",
       "  0.234719917178154,\n",
       "  -1.0687683820724487,\n",
       "  0.19213815033435822,\n",
       "  -0.03276415169239044,\n",
       "  -1.2561804056167603,\n",
       "  0.23210130631923676,\n",
       "  -0.7717899084091187,\n",
       "  0.06708262860774994,\n",
       "  -1.2137868404388428,\n",
       "  -0.41183847188949585,\n",
       "  0.17024008929729462,\n",
       "  0.6685735583305359,\n",
       "  0.03183382749557495,\n",
       "  -0.24949553608894348,\n",
       "  -0.10584849864244461,\n",
       "  -0.36546871066093445,\n",
       "  0.9067010879516602,\n",
       "  0.23778608441352844,\n",
       "  1.3959163427352905,\n",
       "  0.5154728889465332,\n",
       "  -1.1900315284729004,\n",
       "  0.2920399010181427,\n",
       "  -1.8188679218292236,\n",
       "  -0.8827952742576599,\n",
       "  -0.009230628609657288,\n",
       "  0.4527283310890198,\n",
       "  -0.6430500745773315,\n",
       "  0.8032491207122803,\n",
       "  0.8217396140098572,\n",
       "  0.1562398225069046,\n",
       "  -0.714052140712738,\n",
       "  1.5884431600570679,\n",
       "  0.28809356689453125,\n",
       "  -0.564291775226593,\n",
       "  -0.2577996551990509,\n",
       "  0.27945393323898315,\n",
       "  0.5616912841796875,\n",
       "  0.287390798330307,\n",
       "  -0.2901911437511444,\n",
       "  0.04545456916093826,\n",
       "  0.41423729062080383,\n",
       "  0.956475019454956,\n",
       "  0.2993563413619995,\n",
       "  -0.6147775650024414,\n",
       "  -0.024895938113331795,\n",
       "  -0.16312527656555176,\n",
       "  0.47589385509490967,\n",
       "  -0.26871219277381897,\n",
       "  1.9292070865631104,\n",
       "  0.7868540287017822,\n",
       "  -0.7370830178260803,\n",
       "  -0.8358654975891113,\n",
       "  -0.8389773368835449,\n",
       "  -0.5553209185600281,\n",
       "  0.19713611900806427,\n",
       "  0.20220641791820526,\n",
       "  0.8102554082870483,\n",
       "  0.3520188629627228,\n",
       "  1.2139122486114502,\n",
       "  0.45829179883003235,\n",
       "  -0.6534680724143982,\n",
       "  -0.2314840406179428,\n",
       "  -0.35051631927490234,\n",
       "  -1.581020712852478,\n",
       "  -0.007878745906054974,\n",
       "  -0.7238879203796387,\n",
       "  0.36927899718284607,\n",
       "  -0.13138960301876068,\n",
       "  0.8328765034675598,\n",
       "  -0.22164271771907806,\n",
       "  0.571280837059021,\n",
       "  -0.1711573451757431,\n",
       "  -0.7530011534690857,\n",
       "  -0.4104163348674774,\n",
       "  -0.23606352508068085,\n",
       "  -0.9192566275596619,\n",
       "  0.2580185532569885,\n",
       "  1.2354223728179932,\n",
       "  -0.2616666555404663,\n",
       "  -0.8553300499916077,\n",
       "  0.2549271285533905,\n",
       "  -0.6194796562194824,\n",
       "  -0.5458678603172302,\n",
       "  0.04065907746553421,\n",
       "  0.435510516166687,\n",
       "  0.40302619338035583,\n",
       "  -0.3361814320087433,\n",
       "  -0.600046694278717,\n",
       "  -0.15223631262779236,\n",
       "  0.6438239216804504,\n",
       "  0.34384793043136597,\n",
       "  -0.3637096881866455,\n",
       "  1.1180416345596313,\n",
       "  -0.20510193705558777,\n",
       "  -0.5362520813941956,\n",
       "  -1.0972923040390015,\n",
       "  0.4213773310184479,\n",
       "  -0.7343212366104126,\n",
       "  0.7075059413909912,\n",
       "  -0.2773289382457733,\n",
       "  0.9283308982849121,\n",
       "  -0.8958134651184082,\n",
       "  -0.6332613229751587,\n",
       "  0.9927704334259033,\n",
       "  0.9652136564254761,\n",
       "  0.5184622406959534,\n",
       "  -1.7552396059036255,\n",
       "  -0.07687319815158844,\n",
       "  0.2576342225074768,\n",
       "  0.30416232347488403,\n",
       "  -0.11903153359889984,\n",
       "  -0.24481287598609924,\n",
       "  0.7476872205734253,\n",
       "  -0.8868862390518188,\n",
       "  -0.09641793370246887,\n",
       "  -0.6617481112480164,\n",
       "  0.6384519934654236,\n",
       "  0.9283545017242432,\n",
       "  0.37595418095588684,\n",
       "  0.3555215001106262,\n",
       "  0.8109111189842224,\n",
       "  -0.15688274800777435,\n",
       "  0.004436593037098646,\n",
       "  -0.2336386740207672,\n",
       "  -1.116236925125122,\n",
       "  -0.008398869074881077,\n",
       "  0.04541407525539398,\n",
       "  0.24844041466712952,\n",
       "  -0.42435747385025024,\n",
       "  -0.3147318363189697,\n",
       "  -2.24070405960083,\n",
       "  0.18457581102848053,\n",
       "  0.5500321388244629,\n",
       "  0.43200722336769104,\n",
       "  -0.9919187426567078,\n",
       "  0.9371526837348938,\n",
       "  0.05543264374136925,\n",
       "  0.17009569704532623,\n",
       "  1.3604098558425903,\n",
       "  0.32910746335983276,\n",
       "  1.0916728973388672,\n",
       "  0.20976831018924713,\n",
       "  0.10948935151100159,\n",
       "  0.19938135147094727,\n",
       "  -1.838037133216858,\n",
       "  1.0244526863098145,\n",
       "  -0.047464270144701004,\n",
       "  -0.051278356462717056,\n",
       "  -0.8393657803535461,\n",
       "  1.0330370664596558,\n",
       "  -0.7592067122459412,\n",
       "  -0.5694578289985657,\n",
       "  0.6772739887237549,\n",
       "  -0.9558407664299011,\n",
       "  0.6186202764511108,\n",
       "  0.3156411051750183,\n",
       "  -0.4970898926258087,\n",
       "  -1.5861812829971313,\n",
       "  1.2183728218078613,\n",
       "  -0.43647629022598267,\n",
       "  0.5822990536689758,\n",
       "  0.19398048520088196,\n",
       "  -0.04351763799786568,\n",
       "  1.1139962673187256,\n",
       "  2.0328257083892822,\n",
       "  0.9595598578453064,\n",
       "  0.10499297082424164,\n",
       "  0.32416418194770813,\n",
       "  0.4409548342227936,\n",
       "  0.2856980264186859,\n",
       "  0.7344738245010376,\n",
       "  -0.6888971328735352,\n",
       "  -0.7096796631813049,\n",
       "  1.0578875541687012,\n",
       "  -0.6036916971206665,\n",
       "  1.5446478128433228,\n",
       "  0.24131155014038086,\n",
       "  -0.37505990266799927,\n",
       "  -0.2425108402967453,\n",
       "  0.28494498133659363,\n",
       "  -1.2639769315719604,\n",
       "  0.564043402671814,\n",
       "  0.5942244529724121,\n",
       "  -0.643629789352417,\n",
       "  -1.4366333484649658,\n",
       "  0.018321620300412178,\n",
       "  -0.39248788356781006,\n",
       "  -0.1333397626876831,\n",
       "  -0.192034512758255,\n",
       "  -0.2779008746147156,\n",
       "  0.7309980392456055,\n",
       "  -0.20277927815914154,\n",
       "  1.306041955947876,\n",
       "  0.09479868412017822,\n",
       "  -0.25550907850265503,\n",
       "  -0.3228018879890442,\n",
       "  -0.04223794862627983,\n",
       "  -0.5175701379776001,\n",
       "  0.11854799836874008,\n",
       "  -0.2163137048482895,\n",
       "  -0.330869197845459,\n",
       "  0.3054245412349701,\n",
       "  -0.44194501638412476,\n",
       "  -0.24028991162776947,\n",
       "  -1.6702507734298706,\n",
       "  0.42415815591812134,\n",
       "  1.120759129524231,\n",
       "  -0.2981550097465515,\n",
       "  -0.11666734516620636,\n",
       "  -0.18966390192508698,\n",
       "  -1.572542667388916,\n",
       "  0.5726297497749329,\n",
       "  -0.5628930926322937,\n",
       "  -0.3920738995075226,\n",
       "  0.35304248332977295,\n",
       "  -1.2159487009048462,\n",
       "  0.06539960205554962,\n",
       "  0.1459091156721115,\n",
       "  0.6284156441688538,\n",
       "  -0.15182924270629883,\n",
       "  -0.009944040328264236,\n",
       "  -0.0724065825343132,\n",
       "  0.14299680292606354,\n",
       "  0.2469666600227356,\n",
       "  -1.4721043109893799,\n",
       "  -0.014537309296429157,\n",
       "  1.6790640354156494,\n",
       "  -0.6999625563621521,\n",
       "  -0.4045442044734955,\n",
       "  -1.5399457216262817,\n",
       "  1.2302792072296143,\n",
       "  0.010367718525230885,\n",
       "  -0.7367328405380249,\n",
       "  -1.0498279333114624,\n",
       "  -0.10883907228708267,\n",
       "  0.3185346722602844,\n",
       "  0.4033592641353607,\n",
       "  0.4451410174369812,\n",
       "  -0.3907780945301056,\n",
       "  0.19486989080905914,\n",
       "  0.8009843826293945,\n",
       "  0.1889055073261261,\n",
       "  -0.6465634107589722,\n",
       "  0.11195039749145508,\n",
       "  0.14445939660072327,\n",
       "  -0.8727107048034668,\n",
       "  -0.2944100797176361,\n",
       "  -0.12667207419872284,\n",
       "  0.3390101492404938,\n",
       "  -0.5637143850326538,\n",
       "  -1.2054427862167358,\n",
       "  -0.8419790267944336,\n",
       "  -0.9510089755058289,\n",
       "  0.19335918128490448,\n",
       "  0.3654458820819855,\n",
       "  -0.6153057813644409,\n",
       "  -1.1348854303359985,\n",
       "  1.515621542930603,\n",
       "  -0.18480020761489868,\n",
       "  -0.41217032074928284,\n",
       "  0.1813659369945526,\n",
       "  -0.7382403016090393,\n",
       "  0.19593113660812378,\n",
       "  0.06261388957500458,\n",
       "  -0.28173112869262695,\n",
       "  1.6239827871322632,\n",
       "  -0.33780598640441895,\n",
       "  0.28868409991264343,\n",
       "  0.007807346060872078,\n",
       "  0.8282280564308167,\n",
       "  -0.997854471206665,\n",
       "  0.5775356888771057,\n",
       "  -0.1714656502008438,\n",
       "  0.8152638077735901,\n",
       "  1.3339555263519287,\n",
       "  0.2427985966205597,\n",
       "  0.036444444209337234,\n",
       "  -0.6769583225250244,\n",
       "  0.48642340302467346,\n",
       "  1.0524301528930664,\n",
       "  0.06491611152887344,\n",
       "  -0.2636479139328003,\n",
       "  0.10365960001945496,\n",
       "  -0.39165595173835754,\n",
       "  1.1748353242874146,\n",
       "  0.2594318687915802,\n",
       "  -0.4771457314491272,\n",
       "  -0.4215003550052643,\n",
       "  0.27557623386383057,\n",
       "  -2.119401693344116,\n",
       "  -0.21639852225780487,\n",
       "  0.4849959909915924,\n",
       "  0.21665392816066742,\n",
       "  0.4922883212566376,\n",
       "  0.246730774641037,\n",
       "  0.6089586615562439,\n",
       "  -0.609488844871521,\n",
       "  -0.43114492297172546,\n",
       "  0.708592414855957,\n",
       "  -0.8792784214019775,\n",
       "  0.3572799563407898,\n",
       "  0.2022082656621933,\n",
       "  0.13395068049430847,\n",
       "  0.11991539597511292,\n",
       "  -0.5175167918205261,\n",
       "  -0.11650951951742172,\n",
       "  0.18687960505485535,\n",
       "  0.41379639506340027,\n",
       "  -0.033809367567300797,\n",
       "  -1.130048155784607,\n",
       "  -0.4574976861476898,\n",
       "  -1.660010814666748,\n",
       "  ...]]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "relations_representations_str['adjoins'][\"('France', 'Spain')\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "relations_representations_str['adjoins'].keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "\n",
    "json.dump(relations_representations_str, open('final_project/XLM_relations_representations_middle.json', 'w'))\n",
    "#json.dump(text, open('final_project/relations_representations_text.json', 'w'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_number_observations(relations_examples_dict:dict):\n",
    "    print('Number of observations for relation:\\n')\n",
    "    for rel in relations_examples_dict:\n",
    "        i = 0\n",
    "        for ex in relations_examples_dict[rel]:\n",
    "            i += len(relations_examples_dict[rel][ex])\n",
    "        print(f'- {rel}: {i}')\n",
    "        \n",
    "print_number_observations(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "#len(text['adjoins'].keys())\n",
    "bert_rep = relations_representations_str"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Vector comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "\n",
    "bert_rep = json.load(open('final_project/relations_representations_middle.json'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bert_rep.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bert_rep['adjoins'].keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics.pairwise import cosine_distances\n",
    "\n",
    "#dist = [cosine_distances(bert_rep['adjoins'][i], bert_rep['adjoins'][j]) for i in bert_rep['adjoins'].keys() for j in bert_rep['adjoins'].keys() \n",
    "# if i != j]\n",
    "\n",
    "dist2 = [cosine_distances(bert_rep['adjoins'][i], bert_rep['author'][j]) for i in bert_rep['adjoins'].keys() for j in bert_rep['author'].keys()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics.pairwise import cosine_distances, euclidean_distances, manhattan_distances\n",
    "import numpy as np\n",
    "\n",
    "def _distance_within(bert_representations, relation, size_sample, distances):\n",
    "    np.random.seed(42)\n",
    "    relations = list(bert_representations[relation].keys())\n",
    "    no_examples = len(relations)\n",
    "    no_samples_relation = int(no_examples * size_sample)\n",
    "    indices_sample = np.random.randint(0, no_examples, no_samples_relation)\n",
    "    keys_in_sample = [relations[i] for i in indices_sample]\n",
    "    relations_to_consider = {relation_example: bert_representations[relation][relation_example]\n",
    "                             for relation_example in keys_in_sample}\n",
    "    distance = [distances(relations_to_consider[i], relations_to_consider[j]) for i in keys_in_sample\n",
    "                for j in keys_in_sample if i != j]\n",
    "    return distance\n",
    "\n",
    "def calculate_distances_within(bert_representations, size_sample, distances):\n",
    "    return {relation: _distance_within(bert_representations, relation, size_sample, distances)\n",
    "           for relation in bert_representations.keys()}\n",
    "\n",
    "def _distance_between(bert_representations, relation1, relation2, size_sample, distances):\n",
    "    relations_examples1 = list(bert_representations[relation1].keys())\n",
    "    relations_examples2 = list(bert_representations[relation2].keys())\n",
    "    no_examples1 = len(relations_examples1)\n",
    "    no_examples2 = len(relations_examples2)\n",
    "    no_samples_relation1 = int(no_examples1 * size_sample)\n",
    "    no_samples_relation2 = int(no_examples2 * size_sample)\n",
    "    indices_sample1 = np.random.randint(0, no_examples1, no_samples_relation1)\n",
    "    indices_sample2 = np.random.randint(0, no_examples2, no_samples_relation2)\n",
    "    keys_in_sample1 = [relations_examples1[i] for i in indices_sample1]\n",
    "    keys_in_sample2 = [relations_examples2[i] for i in indices_sample2]\n",
    "    relations_to_consider1 = {relation_example: bert_representations[relation1][relation_example]\n",
    "                             for relation_example in keys_in_sample1}\n",
    "    relations_to_consider2 = {relation_example: bert_representations[relation2][relation_example]\n",
    "                             for relation_example in keys_in_sample2}\n",
    "    distance = [distances(relations_to_consider1[i], relations_to_consider2[j]) \n",
    "                for i in keys_in_sample1 for j in keys_in_sample2]\n",
    "    return np.mean(distance)\n",
    "\n",
    "def calculate_distances_between(bert_representations, size_sample, distances):\n",
    "    relations = list(bert_representations.keys())\n",
    "    combination_relations = [(i, j) for i in relations for j in relations if i != j]\n",
    "    return {str((relation1, relation2)): _distance_between(bert_representations, relation1, relation2, size_sample, distances)\n",
    "           for relation1, relation2 in combination_relations}\n",
    "\n",
    "def mean_distance(distances_dict):\n",
    "    return {key : np.mean(list(map(lambda x: x[0][0], distances_dict[key]))) for key in distances_dict}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "distances_within = calculate_distances_within(bert_rep, 0.1, manhattan_distances)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "distances_between = calculate_distances_between(bert_rep, 0.1, manhattan_distances)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "keys_na = [(key, entity) for key in bert_rep for entity in bert_rep[key] if \n",
    "           type(bert_rep[key][entity]) != type([])]\n",
    "\n",
    "bert_rep['is_a'].pop(\"('Staphylococcus_aureus', 'Bacteria')\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "relations = list(bert_rep.keys())\n",
    "combination_relations = [(i, j) for i in relations for j in relations if i != j]\n",
    "distances_absolute = {str((relation1, relation2)): distances_between[str((relation1, relation2))] - distances_within[relation2]\n",
    "                         for relation1, relation2 in combination_relations}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "distances_absolute.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "def to_list(lst_of_arrays:list):\n",
    "    return list(map(lambda x:x[0][0], lst_of_arrays))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "distances = []\n",
    "rel = []\n",
    "for relation in distances_within.keys():\n",
    "    dist = to_list(distances_within[relation])\n",
    "    distances.extend(dist)\n",
    "    rel.extend([relation] * len(dist))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from plotnine import *\n",
    "%matplotlib inline\n",
    "\n",
    "#type_ =  np.array(['adjoins']*len(n))\n",
    "df = pd.DataFrame({'Distance': distances, 'Relations': rel})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<ggplot: (-9223363265629909693)>"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(ggplot(df)\n",
    "     + geom_boxplot(aes('Relations', 'Distance'))\n",
    ") + theme(axis_text_x  = element_text(angle = 90, hjust = 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "import ast\n",
    "\n",
    "rel = list(map(lambda x : ast.literal_eval(x)[0], distances_between.keys()))\n",
    "mean_distances_between = list(map(lambda x:distances_between[x], distances_between.keys()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<ggplot: (-9223363265698566866)>"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_between = pd.DataFrame({'Distance': mean_distances_between, 'Relations': rel})\n",
    "(ggplot(df_between)\n",
    "     + geom_boxplot(aes('Relations', 'Distance'))\n",
    ") + theme(axis_text_x  = element_text(angle = 90, hjust = 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.mean(mean_distances_between)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mean_distances_within = list(map(lambda x:distances_within[x][0][0][0], distances_within.keys()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.mean(mean_distances_within)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
